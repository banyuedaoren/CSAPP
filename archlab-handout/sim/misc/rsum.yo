                            | # This is a y86-64 Assembly code written by fanesemyk, as Part A of CSAPP archlab
                            | 
0x000:                      | 		.pos 0
0x000: 30f40004000000000000 | 		irmovq stack, %rsp
0x00a: 808100000000000000   | 		call main
0x013: 00                   | 		halt
                            | 
                            | # Sample linked list
                            | 
0x018:                      | 		.align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | 		.quad 0x00a
0x020: 2800000000000000     | 		.quad e1e2
0x028:                      | e1e2:
0x028: b000000000000000     | 		.quad 0x0b0
0x030: 3800000000000000     | 		.quad e1e3
0x038:                      | e1e3:
0x038: 000c000000000000     | 		.quad 0xc00
0x040: 0000000000000000     | 		.quad 0
                            | 
                            | # long rsum_list(list_ptr ls)
                            | # ls in %rdi
                            | 
0x048:                      | rsum_list:
0x048: a0cf                 | 		pushq %r12  #callee-save registers, save it because we will change it
0x04a: 30f00000000000000000 | 		irmovq $0, %rax
0x054: 6277                 | 		andq %rdi,%rdi
0x056: 737e00000000000000   | 		je RETURN
0x05f: 50c70000000000000000 | 		mrmovq 0(%rdi), %r12 #store the node value in %rsi
0x069: 50770800000000000000 | 		mrmovq 8(%rdi), %rdi #replace %rdi with the node pointer
0x073: 804800000000000000   | 		call rsum_list
0x07c: 60c0                 | 		addq %r12, %rax
0x07e:                      | RETURN:
0x07e: b0cf                 | 		popq %r12
0x080: 90                   | 		ret
                            | 
0x081:                      | main:
0x081: 30f71800000000000000 | 		irmovq ele1, %rdi
0x08b: 804800000000000000   | 		call rsum_list
0x094: 90                   | 		ret
                            | 
0x400:                      | 		.pos 0x400
0x400:                      | stack:
