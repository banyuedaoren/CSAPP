1
00:00:00,030 --> 00:00:05,759
so today's the second lecture about

2
00:00:03,720 --> 00:00:09,360
network programming we got started last

3
00:00:05,759 --> 00:00:12,780
time and as you probably saw last time

4
00:00:09,360 --> 00:00:16,500
there the AP is for this are really big

5
00:00:12,780 --> 00:00:18,449
and hairy and messy and it takes just a

6
00:00:16,500 --> 00:00:21,480
lot of time in my own personal

7
00:00:18,449 --> 00:00:23,580
experience of rereading we looking at

8
00:00:21,480 --> 00:00:26,220
code looks good examples rereading

9
00:00:23,580 --> 00:00:29,039
documentation going back and forth over

10
00:00:26,220 --> 00:00:32,160
that a dozen or so times before it all

11
00:00:29,039 --> 00:00:34,260
really sinks in and it's one where it

12
00:00:32,160 --> 00:00:36,000
really helps a lot to look at example

13
00:00:34,260 --> 00:00:41,190
code and there's example code in the

14
00:00:36,000 --> 00:00:46,890
book in that CSAP pc file that you've

15
00:00:41,190 --> 00:00:50,520
seen versions of in various forms so I

16
00:00:46,890 --> 00:00:52,110
can lecture for days and weeks but it's

17
00:00:50,520 --> 00:00:54,170
really what we'd all settle in until

18
00:00:52,110 --> 00:00:58,170
you've spent time studying yourself

19
00:00:54,170 --> 00:01:00,000
anyways I want to repeat and go back

20
00:00:58,170 --> 00:01:03,769
over a little bit of ground before but

21
00:01:00,000 --> 00:01:06,299
last time we talked about the idea of

22
00:01:03,769 --> 00:01:12,180
translating from a domain name which is

23
00:01:06,299 --> 00:01:18,090
something like w w CMU edu to IP address

24
00:01:12,180 --> 00:01:20,040
which for IP version 4 is a is a 32-bit

25
00:01:18,090 --> 00:01:23,729
address it's usually written in dotted

26
00:01:20,040 --> 00:01:25,890
decimal form and I showed you a program

27
00:01:23,729 --> 00:01:28,979
last time called host info that you

28
00:01:25,890 --> 00:01:31,250
could that will look actually at the

29
00:01:28,979 --> 00:01:31,250
code for

30
00:01:33,260 --> 00:01:38,390
and I just wanted to show you today I

31
00:01:35,480 --> 00:01:40,640
just did one very small tweak to that

32
00:01:38,390 --> 00:01:44,290
program and I'll describe it today and

33
00:01:40,640 --> 00:01:50,180
the interesting thing is it lets you

34
00:01:44,290 --> 00:01:51,950
look at both ipv4 and ipv6 and it's one

35
00:01:50,180 --> 00:01:53,330
of the interesting features the code in

36
00:01:51,950 --> 00:01:56,420
the book and it's new to the third

37
00:01:53,330 --> 00:01:58,070
edition is it uses a new API that lets

38
00:01:56,420 --> 00:02:00,800
you pretty easily

39
00:01:58,070 --> 00:02:02,660
write code that will work under either

40
00:02:00,800 --> 00:02:08,720
of these two versions of the Internet

41
00:02:02,660 --> 00:02:12,140
Protocol so for example with this

42
00:02:08,720 --> 00:02:16,910
slightly modified program if I now look

43
00:02:12,140 --> 00:02:18,500
up the IP address for Facebook you'll

44
00:02:16,910 --> 00:02:26,270
see it comes back with two different

45
00:02:18,500 --> 00:02:28,430
ones and the the first one is the

46
00:02:26,270 --> 00:02:31,580
familiar dotted decimal form where each

47
00:02:28,430 --> 00:02:34,700
read call that each of these digits it's

48
00:02:31,580 --> 00:02:37,630
a decimal representation of a single

49
00:02:34,700 --> 00:02:42,830
byte so it's a number between 0 and 255

50
00:02:37,630 --> 00:02:49,310
this is a ipv6 address which is I told

51
00:02:42,830 --> 00:02:52,640
you is 128 bits long so that to the

52
00:02:49,310 --> 00:02:55,550
seventh takeaway 3 to the fifth 32 bytes

53
00:02:52,640 --> 00:02:58,250
right and it's usually written in the

54
00:02:55,550 --> 00:03:01,730
text format

55
00:02:58,250 --> 00:03:04,640
with colons after every pair of bytes

56
00:03:01,730 --> 00:03:07,010
and I think the colon colon just means

57
00:03:04,640 --> 00:03:11,989
that's a 0 there when the cute things

58
00:03:07,010 --> 00:03:18,250
Facebook did was embed fa c e is a hex

59
00:03:11,989 --> 00:03:18,250
code inside observe ipv6 address

60
00:03:22,680 --> 00:03:32,350
and actually just I get very different

61
00:03:29,620 --> 00:03:34,360
results running this at home and than I

62
00:03:32,350 --> 00:03:37,140
do here and as I mentioned you'll get

63
00:03:34,360 --> 00:03:40,060
different results running a DNS server

64
00:03:37,140 --> 00:03:42,160
depending where in the country are out

65
00:03:40,060 --> 00:03:43,420
if you repeat the same thing over and

66
00:03:42,160 --> 00:03:45,340
over again you'll get different results

67
00:03:43,420 --> 00:03:48,670
and that's because these very large

68
00:03:45,340 --> 00:03:51,400
companies are providing servers that are

69
00:03:48,670 --> 00:03:53,770
stationed all over the world and it's a

70
00:03:51,400 --> 00:03:55,090
way to sort of balance out the load of

71
00:03:53,770 --> 00:03:57,820
the traffic they also have multiple

72
00:03:55,090 --> 00:04:00,100
server addresses that then they kind of

73
00:03:57,820 --> 00:04:01,720
rotate through to give you so that

74
00:04:00,100 --> 00:04:04,660
different people will get served by

75
00:04:01,720 --> 00:04:07,570
different machines so you see for

76
00:04:04,660 --> 00:04:11,560
example Twitter our Google just gave me

77
00:04:07,570 --> 00:04:14,710
two addresses in ipv4 and ipv6 address

78
00:04:11,560 --> 00:04:20,970
Twitter gave me a for different ipv4

79
00:04:14,710 --> 00:04:23,590
addresses so let's look then at the code

80
00:04:20,970 --> 00:04:26,500
I'll go back through some of what we

81
00:04:23,590 --> 00:04:28,720
talked about last time I quite honestly

82
00:04:26,500 --> 00:04:31,330
I spent a fair amount of time looking at

83
00:04:28,720 --> 00:04:33,820
it so I can really understand it better

84
00:04:31,330 --> 00:04:37,780
because it's pretty it's not simple

85
00:04:33,820 --> 00:04:40,390
stuff but as I mentioned the as we went

86
00:04:37,780 --> 00:04:42,970
over last time this is sort of this

87
00:04:40,390 --> 00:04:45,880
giant block diagram that shows all the

88
00:04:42,970 --> 00:04:48,040
activity involved in setting up and

89
00:04:45,880 --> 00:04:52,540
running both a server and a client and

90
00:04:48,040 --> 00:04:55,620
just to repeat the idea is you need to

91
00:04:52,540 --> 00:04:58,180
the server needs to fire up you can't

92
00:04:55,620 --> 00:05:00,700
contact its server until that server

93
00:04:58,180 --> 00:05:03,130
exists so it's the server is the thing

94
00:05:00,700 --> 00:05:06,190
that has to exist first and all these

95
00:05:03,130 --> 00:05:10,240
steps are what are required for a server

96
00:05:06,190 --> 00:05:14,070
to begin on a machine and then to accept

97
00:05:10,240 --> 00:05:17,410
a connection request from a client

98
00:05:14,070 --> 00:05:20,140
similarly once the server is set then

99
00:05:17,410 --> 00:05:23,170
the client can begin and it's like

100
00:05:20,140 --> 00:05:25,690
placing a call to the server and it

101
00:05:23,170 --> 00:05:28,780
makes a connection request and that's

102
00:05:25,690 --> 00:05:30,610
accepted by the server and then what's

103
00:05:28,780 --> 00:05:33,700
called a session begins meaning an

104
00:05:30,610 --> 00:05:34,330
ability for these two machines to talk

105
00:05:33,700 --> 00:05:37,840
back and

106
00:05:34,330 --> 00:05:40,689
fourth over an internet connection and

107
00:05:37,840 --> 00:05:43,780
they'll do it this example I'll show is

108
00:05:40,689 --> 00:05:47,500
done by reading and writing as if they

109
00:05:43,780 --> 00:05:52,330
were filed a file each end looks like

110
00:05:47,500 --> 00:05:55,750
it's reading and writing a file and then

111
00:05:52,330 --> 00:06:01,349
once the client is done with whatever it

112
00:05:55,750 --> 00:06:06,270
it's trying to get it will disconnect

113
00:06:01,349 --> 00:06:09,310
since we hang up its phone and then the

114
00:06:06,270 --> 00:06:11,440
listening the server will detect this by

115
00:06:09,310 --> 00:06:14,289
receiving an into file when it attempts

116
00:06:11,440 --> 00:06:16,629
to read from the client and then it will

117
00:06:14,289 --> 00:06:19,180
close that connection but and this I

118
00:06:16,629 --> 00:06:21,460
didn't have stated quite properly last

119
00:06:19,180 --> 00:06:23,469
time this it's not going to actually

120
00:06:21,460 --> 00:06:26,139
shut down at that point it's just going

121
00:06:23,469 --> 00:06:28,180
to return back and accept a new

122
00:06:26,139 --> 00:06:30,129
connection request and this is what's

123
00:06:28,180 --> 00:06:33,099
known as an iterative server it can only

124
00:06:30,129 --> 00:06:34,810
handle a single client at a time later

125
00:06:33,099 --> 00:06:37,210
in the course we'll talk about how to do

126
00:06:34,810 --> 00:06:40,960
a multi-threaded server that can handle

127
00:06:37,210 --> 00:06:46,419
multiple connections at one time this is

128
00:06:40,960 --> 00:06:48,759
a pretty basic version so the first step

129
00:06:46,419 --> 00:06:54,639
on either the client or the server side

130
00:06:48,759 --> 00:06:57,969
is this very hairy messy relatively new

131
00:06:54,639 --> 00:06:59,800
API called get adder info and the idea

132
00:06:57,969 --> 00:07:02,650
of get adder info is it's a sort of

133
00:06:59,800 --> 00:07:06,460
kitchen sink our Swiss Army knife if you

134
00:07:02,650 --> 00:07:09,400
know all those expressions of it has a

135
00:07:06,460 --> 00:07:12,729
zillion features that sort of subsume a

136
00:07:09,400 --> 00:07:14,710
lot of other sort of individual

137
00:07:12,729 --> 00:07:18,580
protocols so for example it's pretty

138
00:07:14,710 --> 00:07:25,139
much the same whether it's ipv4 ipv6 it

139
00:07:18,580 --> 00:07:28,360
lets you sort of go forward from and a

140
00:07:25,139 --> 00:07:30,520
domain name to an IP address but to go

141
00:07:28,360 --> 00:07:32,770
backward from an IP address back to a

142
00:07:30,520 --> 00:07:35,529
domain name it supports all of those

143
00:07:32,770 --> 00:07:38,500
things it will let you look up what is

144
00:07:35,529 --> 00:07:41,080
the port number associated with an HTTP

145
00:07:38,500 --> 00:07:44,919
server so we'll let you do all kinds of

146
00:07:41,080 --> 00:07:48,080
different things and as a result it's a

147
00:07:44,919 --> 00:07:51,110
big and messy API with a zillion

148
00:07:48,080 --> 00:07:58,240
zillions features and parameters and so

149
00:07:51,110 --> 00:08:01,790
forth so you recall from last time that

150
00:07:58,240 --> 00:08:07,940
the the data structures we use to refer

151
00:08:01,790 --> 00:08:10,880
to a connection whether it's an ipv4 or

152
00:08:07,940 --> 00:08:13,880
an ipv6 connection is called a sock

153
00:08:10,880 --> 00:08:16,190
adder and as I mentioned this is sort of

154
00:08:13,880 --> 00:08:18,770
the C version of subtyping if you know a

155
00:08:16,190 --> 00:08:21,380
language with a type inheritance

156
00:08:18,770 --> 00:08:24,380
this is how it's done in C it's done by

157
00:08:21,380 --> 00:08:27,080
casting and so in particular the sort of

158
00:08:24,380 --> 00:08:29,780
generic socket address all it needs to

159
00:08:27,080 --> 00:08:31,970
know is a two byte field at the front

160
00:08:29,780 --> 00:08:36,080
that specifies what kind of socket is

161
00:08:31,970 --> 00:08:38,180
this and then in particular we'll be

162
00:08:36,080 --> 00:08:42,919
looking at what's called a sock adder in

163
00:08:38,180 --> 00:08:45,320
which is an ipv4 version of of a socket

164
00:08:42,919 --> 00:08:50,300
and so what it needs to know is a port

165
00:08:45,320 --> 00:08:55,280
number which is a two byte integer and a

166
00:08:50,300 --> 00:08:59,870
I P address which is a four byte address

167
00:08:55,280 --> 00:09:02,030
for ipv4 both of those are actually

168
00:08:59,870 --> 00:09:04,730
stored in this structure as I mentioned

169
00:09:02,030 --> 00:09:06,640
in in big-endian order even if you're

170
00:09:04,730 --> 00:09:09,080
running it on a little endian machine

171
00:09:06,640 --> 00:09:12,410
and one of the interesting features of

172
00:09:09,080 --> 00:09:15,530
that this API this get adder info is

173
00:09:12,410 --> 00:09:18,290
it's largely removed the need for you as

174
00:09:15,530 --> 00:09:21,410
a programmer to worry about byte

175
00:09:18,290 --> 00:09:24,110
ordering and that's a nice feature so in

176
00:09:21,410 --> 00:09:26,060
general for example and get adder info

177
00:09:24,110 --> 00:09:29,720
if I want to pass an ax port number I'll

178
00:09:26,060 --> 00:09:33,020
pass it as a character string a string

179
00:09:29,720 --> 00:09:36,320
representation of a decimal number in

180
00:09:33,020 --> 00:09:39,290
other words and then the code here

181
00:09:36,320 --> 00:09:42,260
within this API will automatically turn

182
00:09:39,290 --> 00:09:45,020
that into a 16-bit integer and put it in

183
00:09:42,260 --> 00:09:49,280
the proper byte order and same with how

184
00:09:45,020 --> 00:09:51,560
it takes use of this 32 bit IP address

185
00:09:49,280 --> 00:09:53,570
and you want to get it into dotted

186
00:09:51,560 --> 00:09:56,000
decimal form it will do that for you

187
00:09:53,570 --> 00:09:59,709
without you having to worry about byte

188
00:09:56,000 --> 00:09:59,709
order so it's kind of a nice thing

189
00:10:05,540 --> 00:10:11,250
so get editor info has a whole bunch of

190
00:10:08,960 --> 00:10:14,010
arguments and some of them are

191
00:10:11,250 --> 00:10:16,050
essentially outputs some of them are

192
00:10:14,010 --> 00:10:18,300
inputs things you're passing into the

193
00:10:16,050 --> 00:10:20,520
function another it's really more like

194
00:10:18,300 --> 00:10:21,060
outputs how it gets information back to

195
00:10:20,520 --> 00:10:25,380
you

196
00:10:21,060 --> 00:10:27,300
so in particular the first one is just

197
00:10:25,380 --> 00:10:32,390
the name of the host and that can be

198
00:10:27,300 --> 00:10:35,460
either a domain name or a dotted decimal

199
00:10:32,390 --> 00:10:37,050
name or one of those funky looking

200
00:10:35,460 --> 00:10:41,400
things with the colons that you solve

201
00:10:37,050 --> 00:10:43,230
for ipv6 the service is usually if

202
00:10:41,400 --> 00:10:45,870
you're looking up so if we're using this

203
00:10:43,230 --> 00:10:48,660
to look up that'll actually be a null

204
00:10:45,870 --> 00:10:51,600
pointer and basically what typically

205
00:10:48,660 --> 00:10:54,390
you'll have is one of those two will be

206
00:10:51,600 --> 00:10:56,340
a string and the other will be a null

207
00:10:54,390 --> 00:10:59,250
pointer and the reason for that is the

208
00:10:56,340 --> 00:11:01,560
same function can be used either to look

209
00:10:59,250 --> 00:11:05,340
up a service like what is the port

210
00:11:01,560 --> 00:11:12,060
number associated with HTTP or it can be

211
00:11:05,340 --> 00:11:13,590
what is the IP address of WWC mu edu the

212
00:11:12,060 --> 00:11:17,610
hints is something that you're passing

213
00:11:13,590 --> 00:11:21,300
in and it's basically is you fill in a

214
00:11:17,610 --> 00:11:23,370
small amount of a fairly large body of

215
00:11:21,300 --> 00:11:26,280
information about what specifically are

216
00:11:23,370 --> 00:11:29,610
you looking for in this request are you

217
00:11:26,280 --> 00:11:35,040
looking for an ipv6 information are you

218
00:11:29,610 --> 00:11:38,130
looking for ipv4 and so forth and then

219
00:11:35,040 --> 00:11:42,270
what it returns back that's why you pass

220
00:11:38,130 --> 00:11:45,890
a star star is it will return back a

221
00:11:42,270 --> 00:11:49,590
linked list that it's generated of

222
00:11:45,890 --> 00:11:54,090
results and the reason for that as I

223
00:11:49,590 --> 00:11:56,160
mentioned is that IP addresses are sort

224
00:11:54,090 --> 00:11:58,620
of many to many mapping potentially

225
00:11:56,160 --> 00:12:00,720
there as you saw it's possible for a

226
00:11:58,620 --> 00:12:03,420
single domain name to have multiple IP

227
00:12:00,720 --> 00:12:05,280
addresses it's possible for a single IP

228
00:12:03,420 --> 00:12:08,520
address to have multiple domain names

229
00:12:05,280 --> 00:12:11,100
and so this is how they handle that sort

230
00:12:08,520 --> 00:12:15,210
of fact that they return a whole list of

231
00:12:11,100 --> 00:12:16,740
results and associated with that once

232
00:12:15,210 --> 00:12:18,060
that result gets you

233
00:12:16,740 --> 00:12:19,680
once you're done with it you're supposed

234
00:12:18,060 --> 00:12:22,620
to call a function called free adder

235
00:12:19,680 --> 00:12:24,150
info that will basically dispose of all

236
00:12:22,620 --> 00:12:25,920
the elements of that linked list you

237
00:12:24,150 --> 00:12:28,860
don't have to do it yourself with free

238
00:12:25,920 --> 00:12:32,160
and then there's a another helper

239
00:12:28,860 --> 00:12:33,930
function called gar ster error that you

240
00:12:32,160 --> 00:12:34,560
use if there's an error code to help you

241
00:12:33,930 --> 00:12:40,650
interpret that

242
00:12:34,560 --> 00:12:44,340
err and it returns an error code so as I

243
00:12:40,650 --> 00:12:47,660
mentioned it returns up a linked list

244
00:12:44,340 --> 00:12:51,480
that result is a linked list of these

245
00:12:47,660 --> 00:12:55,410
get of adders structs edit info structs

246
00:12:51,480 --> 00:12:58,470
and the adder info struct has iliyan

247
00:12:55,410 --> 00:13:03,450
field some of which you'll use and some

248
00:12:58,470 --> 00:13:07,500
which you won't this is for example when

249
00:13:03,450 --> 00:13:09,210
you're passing in hints hints is sort of

250
00:13:07,500 --> 00:13:10,980
that what you're passing in the

251
00:13:09,210 --> 00:13:12,960
information you know some conditions

252
00:13:10,980 --> 00:13:19,290
about what you're looking for in this

253
00:13:12,960 --> 00:13:22,050
request and then what some of these you

254
00:13:19,290 --> 00:13:23,670
pass in and some of it returns and so

255
00:13:22,050 --> 00:13:26,220
some of these fields are ones that then

256
00:13:23,670 --> 00:13:29,850
you can use when you're making calls to

257
00:13:26,220 --> 00:13:32,490
other socket functions functions in the

258
00:13:29,850 --> 00:13:34,740
socket library it'll fill in instead of

259
00:13:32,490 --> 00:13:37,470
you having to worry about what's the

260
00:13:34,740 --> 00:13:40,080
structure the format of a sock adder in

261
00:13:37,470 --> 00:13:44,630
and how do I convert into network order

262
00:13:40,080 --> 00:13:44,630
and stuff it will do all that for you

263
00:13:46,400 --> 00:13:50,240
so it's a little confusing to use though

264
00:13:48,770 --> 00:13:52,640
because sometimes the stuff you're

265
00:13:50,240 --> 00:13:54,680
providing is stuff you're giving it and

266
00:13:52,640 --> 00:14:00,740
sometimes it's stuff that it's returning

267
00:13:54,680 --> 00:14:03,410
back to you and then there's an inverse

268
00:14:00,740 --> 00:14:11,600
function that so get editor info is

269
00:14:03,410 --> 00:14:14,920
given a it's actually give me the

270
00:14:11,600 --> 00:14:19,070
address information about some name and

271
00:14:14,920 --> 00:14:22,610
get name info is I give you an address

272
00:14:19,070 --> 00:14:24,470
and you give me back some documentation

273
00:14:22,610 --> 00:14:28,100
about it including potentially a domain

274
00:14:24,470 --> 00:14:32,420
name so there you pass in as a the first

275
00:14:28,100 --> 00:14:34,430
argument is a sock adder struct remember

276
00:14:32,420 --> 00:14:37,660
for this lecture and I think in the book

277
00:14:34,430 --> 00:14:41,330
in a few places we've sort of created a

278
00:14:37,660 --> 00:14:43,430
type def to alias so we don't have to

279
00:14:41,330 --> 00:14:48,680
say struct sock adder all over the place

280
00:14:43,430 --> 00:14:53,560
that's what the essay is and it will

281
00:14:48,680 --> 00:14:57,080
provide back information about that that

282
00:14:53,560 --> 00:14:59,839
address so if you passing in a 32 bit IP

283
00:14:57,080 --> 00:15:02,750
address you can get it to return either

284
00:14:59,839 --> 00:15:06,110
a dotted decimal version of that or to

285
00:15:02,750 --> 00:15:09,370
do the DNS lookup and have it come back

286
00:15:06,110 --> 00:15:09,370
with the domain name for that

287
00:15:10,440 --> 00:15:17,460
so this is that program that I just

288
00:15:13,770 --> 00:15:19,200
demoed to you this one called host info

289
00:15:17,460 --> 00:15:22,170
so all it's really going to do is use

290
00:15:19,200 --> 00:15:25,290
these features to all on the command

291
00:15:22,170 --> 00:15:27,810
line give a domain name say and it will

292
00:15:25,290 --> 00:15:33,300
just come back with a list of IP

293
00:15:27,810 --> 00:15:36,270
addresses so and this is pretty much the

294
00:15:33,300 --> 00:15:40,770
way you write code for this get a tour

295
00:15:36,270 --> 00:15:43,470
info API that you typically so hints is

296
00:15:40,770 --> 00:15:48,510
the information I'm passing about what

297
00:15:43,470 --> 00:15:50,910
it is I'm looking for here and so you

298
00:15:48,510 --> 00:15:54,900
start typically by zeroing out that

299
00:15:50,910 --> 00:15:56,580
entire field and then setting the

300
00:15:54,900 --> 00:16:01,230
particular things you want

301
00:15:56,580 --> 00:16:04,290
so in particular in this code that's

302
00:16:01,230 --> 00:16:06,240
that in the slides and the one I demoed

303
00:16:04,290 --> 00:16:09,540
to you last time I'm only going to be

304
00:16:06,240 --> 00:16:12,090
looking for ipv4 connections and so I

305
00:16:09,540 --> 00:16:14,390
use the constant called AF I net which

306
00:16:12,090 --> 00:16:17,160
is defined in the sockets interface and

307
00:16:14,390 --> 00:16:19,770
also I'll say that I want a TCP

308
00:16:17,160 --> 00:16:22,170
connection what's called a socket stream

309
00:16:19,770 --> 00:16:26,580
which if you recall is the sort of

310
00:16:22,170 --> 00:16:29,610
protocol that 99% of the IP traffic in

311
00:16:26,580 --> 00:16:31,320
the world is carrying is on TCP meaning

312
00:16:29,610 --> 00:16:34,200
it provides a somewhat higher level

313
00:16:31,320 --> 00:16:37,530
abstraction of what's going on of

314
00:16:34,200 --> 00:16:40,430
sending packets back and forth so that's

315
00:16:37,530 --> 00:16:43,620
as much hint as I'm giving it here and

316
00:16:40,430 --> 00:16:46,500
now I'm I'm making a call to get adder

317
00:16:43,620 --> 00:16:48,120
info and this argument is the name which

318
00:16:46,500 --> 00:16:51,420
is I'm getting it right off of the

319
00:16:48,120 --> 00:16:55,500
command line here so in my demo it was

320
00:16:51,420 --> 00:16:58,620
always a commit up a domain name I'm

321
00:16:55,500 --> 00:17:00,900
passing in null for the service as I

322
00:16:58,620 --> 00:17:04,790
mentioned this call you typically have

323
00:17:00,900 --> 00:17:07,500
one of the two are is null but not both

324
00:17:04,790 --> 00:17:10,560
hints is what I'm passing in is this is

325
00:17:07,500 --> 00:17:14,220
the kind of information I want and list

326
00:17:10,560 --> 00:17:17,189
P is a will now become a pointer to the

327
00:17:14,220 --> 00:17:19,699
results that get returned by get adder

328
00:17:17,189 --> 00:17:19,699
info

329
00:17:20,279 --> 00:17:26,579
so that's the calling all of its quarry

330
00:17:28,409 --> 00:17:33,249
okay and now I want to go back so I got

331
00:17:31,539 --> 00:17:34,990
one of those linked lists and that will

332
00:17:33,249 --> 00:17:37,179
have a whole bunch of IP address of

333
00:17:34,990 --> 00:17:41,019
potentially multiple IP addresses in it

334
00:17:37,179 --> 00:17:43,210
maybe just one maybe none but some

335
00:17:41,019 --> 00:17:45,100
number of them in a link twist and I

336
00:17:43,210 --> 00:17:47,139
want to walk through that list and get

337
00:17:45,100 --> 00:17:50,679
back the dotted decimal version of all

338
00:17:47,139 --> 00:17:52,690
those names or the colon eyes of those

339
00:17:50,679 --> 00:17:54,100
ipv6 addresses I don't know how you

340
00:17:52,690 --> 00:17:57,879
refer to those by the way

341
00:17:54,100 --> 00:18:01,119
I know relatively little about ipv6 I

342
00:17:57,879 --> 00:18:03,460
have to confess so then there's a

343
00:18:01,119 --> 00:18:06,279
function called get name info which

344
00:18:03,460 --> 00:18:08,710
usually you use to take a socket address

345
00:18:06,279 --> 00:18:12,879
IP address and go backward and get a

346
00:18:08,710 --> 00:18:15,549
domain name but if I tell it by a flag

347
00:18:12,879 --> 00:18:18,340
one of the the final argument to it is a

348
00:18:15,549 --> 00:18:20,230
flag argument and say what I want back

349
00:18:18,340 --> 00:18:23,230
from this is not a donut main name I

350
00:18:20,230 --> 00:18:25,769
wanted in this numeric format either

351
00:18:23,230 --> 00:18:30,129
dotted decimal or the Cohen's between

352
00:18:25,769 --> 00:18:32,980
hex digits so by passing that to get

353
00:18:30,129 --> 00:18:35,499
name itself what it's going to return

354
00:18:32,980 --> 00:18:39,490
and I'm passing in a buffer meaning a

355
00:18:35,499 --> 00:18:41,950
care star and some size of that buffer

356
00:18:39,490 --> 00:18:44,860
and it's going to fill that in with the

357
00:18:41,950 --> 00:18:47,499
string representation of it so you see

358
00:18:44,860 --> 00:18:49,990
this is the way I'm going from the if

359
00:18:47,499 --> 00:18:55,019
you look at this is the actual sock

360
00:18:49,990 --> 00:18:57,909
adder of each of the list elements I'm

361
00:18:55,019 --> 00:19:00,519
giving it it's going from that sock

362
00:18:57,909 --> 00:19:04,629
adder which embedded within it as you

363
00:19:00,519 --> 00:19:07,419
know it's the for by IP address and what

364
00:19:04,629 --> 00:19:09,580
it's doing is it's taking that flipping

365
00:19:07,419 --> 00:19:13,480
the bytes well and converting it to the

366
00:19:09,580 --> 00:19:14,980
dotted decimal form so this function can

367
00:19:13,480 --> 00:19:16,509
do a lot of different things and I'm

368
00:19:14,980 --> 00:19:19,380
using it for that particular feature

369
00:19:16,509 --> 00:19:23,460
here question so regarded

370
00:19:19,380 --> 00:19:25,700
peaceful if he is no then I will go very

371
00:19:23,460 --> 00:19:25,700
far

372
00:19:26,480 --> 00:19:32,040
yep because you know it's a

373
00:19:29,040 --> 00:19:35,160
null-terminated whisk so other questions

374
00:19:32,040 --> 00:19:38,720
good questions but that's exactly the

375
00:19:35,160 --> 00:19:41,940
code you saw running and all I did to

376
00:19:38,720 --> 00:19:46,560
generalize it to include ipv6 addresses

377
00:19:41,940 --> 00:19:50,700
was I commented out this one say I don't

378
00:19:46,560 --> 00:19:54,060
I don't demand that it be a IP IFI net

379
00:19:50,700 --> 00:19:57,410
is a shorthand for ipv4 so by commenting

380
00:19:54,060 --> 00:20:01,500
that out it said okay I'll get whatever

381
00:19:57,410 --> 00:20:07,950
TCP connections this domain will support

382
00:20:01,500 --> 00:20:10,680
and that will include ipv6 addresses so

383
00:20:07,950 --> 00:20:12,690
I thought it's pretty neat and you have

384
00:20:10,680 --> 00:20:14,580
to be a pretty nerdy but I am pretty

385
00:20:12,690 --> 00:20:16,350
nerdy to think this kind of thing is

386
00:20:14,580 --> 00:20:18,630
neat but that you could write code and

387
00:20:16,350 --> 00:20:20,490
in this way that whether you're doing

388
00:20:18,630 --> 00:20:24,450
you know different versions of the

389
00:20:20,490 --> 00:20:29,390
internet protocol it's all one common

390
00:20:24,450 --> 00:20:32,160
body of code so we've seen demo of this

391
00:20:29,390 --> 00:20:36,210
okay so now let's jump into that shows

392
00:20:32,160 --> 00:20:39,090
you sort of a little bit of this get

393
00:20:36,210 --> 00:20:43,260
adder info API now let's jump into the

394
00:20:39,090 --> 00:20:45,930
the full-blown web server part and as I

395
00:20:43,260 --> 00:20:47,960
mentioned in chronological order you

396
00:20:45,930 --> 00:20:50,610
actually want to set up the server first

397
00:20:47,960 --> 00:20:53,250
but it's easiest to understand the code

398
00:20:50,610 --> 00:20:57,180
for the client because as you see it has

399
00:20:53,250 --> 00:20:59,700
a couple fewer calls to make so let's go

400
00:20:57,180 --> 00:21:01,260
for through the client just imagine that

401
00:20:59,700 --> 00:21:05,060
somewhere out there there's a server

402
00:21:01,260 --> 00:21:05,060
that's waiting for us to connect to

403
00:21:06,050 --> 00:21:11,960
so this now doesn't perhaps when you

404
00:21:10,070 --> 00:21:13,130
break it down maybe this picture looks a

405
00:21:11,960 --> 00:21:15,860
little less daunting

406
00:21:13,130 --> 00:21:19,820
we already saw get editor info is the

407
00:21:15,860 --> 00:21:22,870
way I'm going to get an IP address out

408
00:21:19,820 --> 00:21:26,060
of whatever I'm where my server is

409
00:21:22,870 --> 00:21:28,730
socket I mentioned this yesterday or

410
00:21:26,060 --> 00:21:31,510
last time it's just a local call that

411
00:21:28,730 --> 00:21:34,640
used to allocate some data structures

412
00:21:31,510 --> 00:21:38,030
for this particular connection and then

413
00:21:34,640 --> 00:21:40,430
connect is like placing a call it's an

414
00:21:38,030 --> 00:21:43,850
API it's actually sending over the

415
00:21:40,430 --> 00:21:45,560
Internet to the server some information

416
00:21:43,850 --> 00:21:50,300
saying hey I'd like to connect to you

417
00:21:45,560 --> 00:21:52,730
and then once the server of risk that

418
00:21:50,300 --> 00:21:55,580
once that connection is accepted then I

419
00:21:52,730 --> 00:22:00,380
can begin my session so let's look at

420
00:21:55,580 --> 00:22:02,480
that so first of all I have to go

421
00:22:00,380 --> 00:22:04,880
through all this rigmarole would get a

422
00:22:02,480 --> 00:22:06,550
tour info but it will look pretty

423
00:22:04,880 --> 00:22:08,480
similar to what you've seen before

424
00:22:06,550 --> 00:22:12,370
except I'm going to give a little more

425
00:22:08,480 --> 00:22:12,370
information because I want this to be

426
00:22:13,570 --> 00:22:20,390
I'm filling in a few more details here

427
00:22:18,410 --> 00:22:22,790
because I want to specify more features

428
00:22:20,390 --> 00:22:25,550
of this connection so I'm saying that

429
00:22:22,790 --> 00:22:28,940
it's a TCP connection that's a sock

430
00:22:25,550 --> 00:22:31,460
stream I'm saying that I'm going to give

431
00:22:28,940 --> 00:22:34,610
it a port number in a numeric form you

432
00:22:31,460 --> 00:22:38,570
could also say as I mentioned of the

433
00:22:34,610 --> 00:22:41,600
certain ports have standard names HTTP

434
00:22:38,570 --> 00:22:43,730
SSH and so forth and you can actually

435
00:22:41,600 --> 00:22:47,470
pass in the string representation of

436
00:22:43,730 --> 00:22:50,780
those but I'm using this in a sort of

437
00:22:47,470 --> 00:22:54,700
idiosyncratic way here and then this

438
00:22:50,780 --> 00:22:57,620
feature get adder configures of a

439
00:22:54,700 --> 00:23:00,050
parameter that described in the book and

440
00:22:57,620 --> 00:23:02,510
they say it's a good idea to use it and

441
00:23:00,050 --> 00:23:05,450
then I'm making a call to my friend get

442
00:23:02,510 --> 00:23:09,190
adder info with these hints and it's

443
00:23:05,450 --> 00:23:11,860
going to return back this link twist of

444
00:23:09,190 --> 00:23:15,200
representing the the results of this

445
00:23:11,860 --> 00:23:17,270
request so basically a link twist of IP

446
00:23:15,200 --> 00:23:19,890
addresses

447
00:23:17,270 --> 00:23:23,700
so now just like you saw before I'm

448
00:23:19,890 --> 00:23:25,770
going to walk that list with a except

449
00:23:23,700 --> 00:23:28,049
now what I'm going to try and do is for

450
00:23:25,770 --> 00:23:30,150
each of those say well here's the number

451
00:23:28,049 --> 00:23:32,340
let me give that a try and if that fails

452
00:23:30,150 --> 00:23:34,380
here's another address let me give that

453
00:23:32,340 --> 00:23:37,049
a try so I'm going to do sequentially

454
00:23:34,380 --> 00:23:40,500
try all the different addresses you saw

455
00:23:37,049 --> 00:23:43,049
for example for potential addresses for

456
00:23:40,500 --> 00:23:46,740
Twitter I'll walk through all of those

457
00:23:43,049 --> 00:23:53,250
and on each one I'm going to call for a

458
00:23:46,740 --> 00:23:55,470
socket and the socket is the one that as

459
00:23:53,250 --> 00:23:57,720
I said it allocates some data structures

460
00:23:55,470 --> 00:24:00,210
I talked about this last time that's why

461
00:23:57,720 --> 00:24:02,309
I'm rushing to is pretty fast but you'll

462
00:24:00,210 --> 00:24:05,400
notice that the fields that you're

463
00:24:02,309 --> 00:24:10,200
filling in are actually all been

464
00:24:05,400 --> 00:24:12,299
generated for us by the get adder info

465
00:24:10,200 --> 00:24:14,130
call so whereas the east' have to

466
00:24:12,299 --> 00:24:16,950
remember oh this is the number and it

467
00:24:14,130 --> 00:24:20,490
should be a shortened network order and

468
00:24:16,950 --> 00:24:22,860
yada da pretty much nowadays you can

469
00:24:20,490 --> 00:24:27,380
just say here I'm just going to pass you

470
00:24:22,860 --> 00:24:27,380
this information that this

471
00:24:31,540 --> 00:24:39,470
was returned by a function call and then

472
00:24:36,050 --> 00:24:41,050
as I mentioned also last time I know I

473
00:24:39,470 --> 00:24:43,820
went through a pretty fast last time

474
00:24:41,050 --> 00:24:46,490
socket actually returns back to you a

475
00:24:43,820 --> 00:24:48,580
file descriptor and you recall a file

476
00:24:46,490 --> 00:24:52,970
descriptor is just a small integer

477
00:24:48,580 --> 00:24:56,690
starts with 0 1 & 2 and then it goes up

478
00:24:52,970 --> 00:24:59,330
from there and so I'm going to interface

479
00:24:56,690 --> 00:25:03,350
with this network code as if I'm talking

480
00:24:59,330 --> 00:25:05,000
through files but it doesn't socket

481
00:25:03,350 --> 00:25:07,100
doesn't actually do anything as far as

482
00:25:05,000 --> 00:25:10,520
the internet goes there's nothing going

483
00:25:07,100 --> 00:25:12,890
there's not even the no serious effort

484
00:25:10,520 --> 00:25:16,610
within the operating system nothing goes

485
00:25:12,890 --> 00:25:20,690
over the network here so the real work

486
00:25:16,610 --> 00:25:24,560
here is but it also allocates some some

487
00:25:20,690 --> 00:25:27,470
local data structures and then what I'll

488
00:25:24,560 --> 00:25:29,810
do is I'll attempt to connect to the

489
00:25:27,470 --> 00:25:31,940
server and again you'll see the various

490
00:25:29,810 --> 00:25:35,690
arguments I have to pass to the connect

491
00:25:31,940 --> 00:25:38,710
command I get provided for me out of

492
00:25:35,690 --> 00:25:40,970
this call I made to get editor info and

493
00:25:38,710 --> 00:25:43,370
that's either going to work or it's not

494
00:25:40,970 --> 00:25:45,770
going to work similarly the socket calls

495
00:25:43,370 --> 00:25:48,830
either going to work or not work be very

496
00:25:45,770 --> 00:25:50,480
unusual for a call to socket to fail but

497
00:25:48,830 --> 00:25:53,900
connect for example will fail if the

498
00:25:50,480 --> 00:25:59,110
server's not available or doesn't like

499
00:25:53,900 --> 00:25:59,110
you for some reason and so if that

500
00:25:59,710 --> 00:26:04,520
succeeds I'm going to break out of this

501
00:26:01,970 --> 00:26:10,250
loop I'm going to then free this data

502
00:26:04,520 --> 00:26:14,540
structure and return the client the file

503
00:26:10,250 --> 00:26:16,460
descriptor for the this particular

504
00:26:14,540 --> 00:26:18,740
function it's job is to open a

505
00:26:16,460 --> 00:26:21,170
connection to a client and return a file

506
00:26:18,740 --> 00:26:23,840
descriptor for it and this is just what

507
00:26:21,170 --> 00:26:27,040
happens if you fall out of the loop not

508
00:26:23,840 --> 00:26:27,040
having made any connection

509
00:26:30,160 --> 00:26:38,930
okay so I know this is a marching this

510
00:26:33,860 --> 00:26:41,330
fast and as I said I know from my own

511
00:26:38,930 --> 00:26:43,970
personal experience I can attest this

512
00:26:41,330 --> 00:26:44,930
stuff just takes time to understand

513
00:26:43,970 --> 00:26:48,320
because there's so many different

514
00:26:44,930 --> 00:26:53,180
features here okay but that's the idea

515
00:26:48,320 --> 00:26:55,070
is we're going to now on the server side

516
00:26:53,180 --> 00:26:57,140
which as I mentioned is that actually

517
00:26:55,070 --> 00:26:59,480
what you do beforehand because you can't

518
00:26:57,140 --> 00:27:01,730
really have a client connect to a server

519
00:26:59,480 --> 00:27:03,410
that doesn't exist but it's just a

520
00:27:01,730 --> 00:27:06,050
little bit trickier to understand what's

521
00:27:03,410 --> 00:27:08,570
going on but you'll see it the first two

522
00:27:06,050 --> 00:27:10,820
steps are the same I need a socket but

523
00:27:08,570 --> 00:27:13,370
then remember what I want to do is

524
00:27:10,820 --> 00:27:16,610
essentially set up a server that

525
00:27:13,370 --> 00:27:19,430
listening on a particular port for

526
00:27:16,610 --> 00:27:21,200
clients to request on it and that's the

527
00:27:19,430 --> 00:27:24,170
function of the bind in the wissen

528
00:27:21,200 --> 00:27:26,960
functions and then the accept is when

529
00:27:24,170 --> 00:27:30,490
I'm saying okay the server is ready I'm

530
00:27:26,960 --> 00:27:34,910
ready to accept requests and it will

531
00:27:30,490 --> 00:27:38,890
fire that up in particular the accept

532
00:27:34,910 --> 00:27:41,900
will just stop and hang up and wait

533
00:27:38,890 --> 00:27:45,110
indefinitely until some connection

534
00:27:41,900 --> 00:27:48,110
request comes in so if the server has no

535
00:27:45,110 --> 00:27:52,000
customers if there are no clients it

536
00:27:48,110 --> 00:27:56,000
will just be waiting potentially forever

537
00:27:52,000 --> 00:27:57,980
with the call to accept okay everything

538
00:27:56,000 --> 00:28:00,050
else goes through boom boom boom but

539
00:27:57,980 --> 00:28:04,300
that one is where the actual waiting

540
00:28:00,050 --> 00:28:04,300
occurs for client connections

541
00:28:06,350 --> 00:28:12,590
some way I should mention the Kinect

542
00:28:09,490 --> 00:28:15,110
will also hang up and wait until the

543
00:28:12,590 --> 00:28:17,180
connection is formed but typically it's

544
00:28:15,110 --> 00:28:19,970
built in with a timeout so that it will

545
00:28:17,180 --> 00:28:21,620
fail if it takes too long and you can

546
00:28:19,970 --> 00:28:23,360
adjust the parameters on both of these

547
00:28:21,620 --> 00:28:27,140
how long you wait for whether your

548
00:28:23,360 --> 00:28:31,910
weight enough but I'm talking the

549
00:28:27,140 --> 00:28:37,160
typical case so anyways again what will

550
00:28:31,910 --> 00:28:39,320
look a little those functions then okay

551
00:28:37,160 --> 00:28:42,350
so this again we have to make a call to

552
00:28:39,320 --> 00:28:44,120
get edit info and this time it's not

553
00:28:42,350 --> 00:28:46,250
because I need any IP addresses I

554
00:28:44,120 --> 00:28:48,770
already have an IP address I'm a local

555
00:28:46,250 --> 00:28:52,700
server I don't actually need to know the

556
00:28:48,770 --> 00:28:55,630
IP addresses of my of the client so I

557
00:28:52,700 --> 00:28:58,160
usually won't know them but I need to

558
00:28:55,630 --> 00:29:00,500
fill in all those nasty little data

559
00:28:58,160 --> 00:29:03,620
structures and so that's what I'm going

560
00:29:00,500 --> 00:29:05,570
to use get adder info here for here so

561
00:29:03,620 --> 00:29:10,100
I'm going to say this time again I want

562
00:29:05,570 --> 00:29:17,480
a TCP connection a sock stream I want it

563
00:29:10,100 --> 00:29:22,220
to be a listening for any IP address

564
00:29:17,480 --> 00:29:24,710
connection coming in so it's passive

565
00:29:22,220 --> 00:29:27,080
meaning it's not actively reaching out

566
00:29:24,710 --> 00:29:30,740
it's passively waiting for connection

567
00:29:27,080 --> 00:29:33,740
requests I'll say that I'm going to tell

568
00:29:30,740 --> 00:29:36,320
you a port number that I'm going to

569
00:29:33,740 --> 00:29:41,780
actually use as my servers port number

570
00:29:36,320 --> 00:29:44,540
and then I'm going to make a call and

571
00:29:41,780 --> 00:29:46,940
this time you see that I'm not giving

572
00:29:44,540 --> 00:29:49,010
any information about the host because I

573
00:29:46,940 --> 00:29:50,690
am the host but I'm giving the

574
00:29:49,010 --> 00:29:54,680
information of the port number that I'm

575
00:29:50,690 --> 00:29:57,470
using for this server and the other

576
00:29:54,680 --> 00:30:03,170
hints that I've just filled in and then

577
00:29:57,470 --> 00:30:06,830
it will return a wispy yes memset is the

578
00:30:03,170 --> 00:30:10,910
standard way that you set all the bytes

579
00:30:06,830 --> 00:30:14,090
in in some number of bytes to a fixed

580
00:30:10,910 --> 00:30:19,010
value it's the same as if you've use B 0

581
00:30:14,090 --> 00:30:21,980
before or B it was is the way you often

582
00:30:19,010 --> 00:30:23,480
would zero out a bunch of bytes and if

583
00:30:21,980 --> 00:30:26,210
you look at the web page and I don't

584
00:30:23,480 --> 00:30:32,270
know why they say use memset don't use B

585
00:30:26,210 --> 00:30:35,900
0 anymore so callous Walt to do it out

586
00:30:32,270 --> 00:30:41,480
but I'm not actually eleking anything

587
00:30:35,900 --> 00:30:43,940
see the hints is a struct here and

588
00:30:41,480 --> 00:30:46,130
remember is struct is just a bunch of

589
00:30:43,940 --> 00:30:48,830
bytes and so if I make that particular

590
00:30:46,130 --> 00:30:50,630
call to memset it will set every byte in

591
00:30:48,830 --> 00:30:53,210
that structure to 0 and this is sort of

592
00:30:50,630 --> 00:30:55,100
the official standard way you're

593
00:30:53,210 --> 00:31:01,280
supposed to do that kind of thing so

594
00:30:55,100 --> 00:31:06,340
it's a good question so question hey I

595
00:31:01,280 --> 00:31:08,630
pass of is that it's a it's a listening

596
00:31:06,340 --> 00:31:14,750
connection it's going to be a listening

597
00:31:08,630 --> 00:31:18,260
connection and a I adder config was some

598
00:31:14,750 --> 00:31:20,150
other argument and quite honestly I

599
00:31:18,260 --> 00:31:25,280
don't remember but you saw I gave it

600
00:31:20,150 --> 00:31:27,830
before with the get host name so I don't

601
00:31:25,280 --> 00:31:30,320
remember it's it's a somewhat obscure

602
00:31:27,830 --> 00:31:34,910
per parameter that's not even a required

603
00:31:30,320 --> 00:31:38,200
parameter it's in the book I'm sorry or

604
00:31:34,910 --> 00:31:38,200
you could google it right now

605
00:31:41,240 --> 00:31:45,660
one interesting thing is I didn't say

606
00:31:43,680 --> 00:31:48,000
that on this code on either side that

607
00:31:45,660 --> 00:31:51,210
it's a Fi net I didn't force this to be

608
00:31:48,000 --> 00:31:53,720
I CV for code this will work for ipv4 or

609
00:31:51,210 --> 00:31:57,650
six the exact same code

610
00:31:53,720 --> 00:32:00,630
okay so again whispy comes back with a

611
00:31:57,650 --> 00:32:04,830
list of stuff typically that list will

612
00:32:00,630 --> 00:32:08,910
be of length one in fact I don't know

613
00:32:04,830 --> 00:32:11,850
why it would be anything else but it has

614
00:32:08,910 --> 00:32:16,290
the same general look to it so again I'm

615
00:32:11,850 --> 00:32:18,150
going to make a call to socket to create

616
00:32:16,290 --> 00:32:20,340
a file descriptor that I'm going to use

617
00:32:18,150 --> 00:32:22,470
this will be the one that it lists the

618
00:32:20,340 --> 00:32:26,460
server listens on of your connection

619
00:32:22,470 --> 00:32:28,620
requests and then there's another kind

620
00:32:26,460 --> 00:32:31,770
of obscure thing you have to do of

621
00:32:28,620 --> 00:32:36,720
setting some options on that socket that

622
00:32:31,770 --> 00:32:42,330
will get it to free it up more quickly

623
00:32:36,720 --> 00:32:44,040
if there's a failure it's this is gone

624
00:32:42,330 --> 00:32:45,840
this one I dunno and it's kind of

625
00:32:44,040 --> 00:32:47,210
obscure and it's in the book so I won't

626
00:32:45,840 --> 00:32:50,160
spend a lot of time talking about it

627
00:32:47,210 --> 00:32:54,860
okay but now what here's the real work

628
00:32:50,160 --> 00:32:59,580
is the bind call is the one that says I

629
00:32:54,860 --> 00:33:05,340
want this file descriptor to be

630
00:32:59,580 --> 00:33:07,650
associated with this information which

631
00:33:05,340 --> 00:33:10,680
in particular specifies the port number

632
00:33:07,650 --> 00:33:11,430
so that's where the binding occurs for

633
00:33:10,680 --> 00:33:14,820
this machine

634
00:33:11,430 --> 00:33:16,890
remember port numbers are a resource

635
00:33:14,820 --> 00:33:19,590
that all the different applications on a

636
00:33:16,890 --> 00:33:22,920
single machine are sort of sharing or

637
00:33:19,590 --> 00:33:25,140
are competing for and so this is

638
00:33:22,920 --> 00:33:29,220
requesting I want to use this particular

639
00:33:25,140 --> 00:33:31,920
port number in doing this in setting up

640
00:33:29,220 --> 00:33:34,140
a server and that may fail if the ports

641
00:33:31,920 --> 00:33:36,420
already in use or if you're trying to

642
00:33:34,140 --> 00:33:37,890
set up a service on a port that you're

643
00:33:36,420 --> 00:33:42,170
not allowed to do like you're not

644
00:33:37,890 --> 00:33:46,700
allowed to set up a service on port 80

645
00:33:42,170 --> 00:33:46,700
unless you have root access

646
00:33:48,980 --> 00:33:55,980
so and then again it passes in the

647
00:33:53,909 --> 00:34:05,190
information that was filled in by the

648
00:33:55,980 --> 00:34:06,929
call to get a tour info so we're not

649
00:34:05,190 --> 00:34:10,379
quite done yet

650
00:34:06,929 --> 00:34:13,409
but we if this succeeds then what we've

651
00:34:10,379 --> 00:34:19,220
done is we've found a port number and a

652
00:34:13,409 --> 00:34:19,220
file descriptor together and a socket

653
00:34:22,389 --> 00:34:29,270
but it all that's done is that's again

654
00:34:25,490 --> 00:34:33,079
just within the machine saying okay I

655
00:34:29,270 --> 00:34:35,000
agree you you you particularly this

656
00:34:33,079 --> 00:34:37,099
particular process gets to be listening

657
00:34:35,000 --> 00:34:39,919
on a particular port but it's not

658
00:34:37,099 --> 00:34:41,919
actually listening yet and I don't know

659
00:34:39,919 --> 00:34:44,300
why they split it into two but they do

660
00:34:41,919 --> 00:34:47,389
and now I actually have to explicitly

661
00:34:44,300 --> 00:34:49,490
make a call to listen saying okay now I

662
00:34:47,389 --> 00:34:52,669
really am ready to receive connection

663
00:34:49,490 --> 00:35:00,680
requests and you can give as a parameter

664
00:34:52,669 --> 00:35:02,450
of a number that says how many requests

665
00:35:00,680 --> 00:35:06,050
connection requests are you allowed to

666
00:35:02,450 --> 00:35:08,390
queue up before they start getting

667
00:35:06,050 --> 00:35:11,589
refused and this is a performance

668
00:35:08,390 --> 00:35:13,730
parameter that if you set it to low then

669
00:35:11,589 --> 00:35:16,070
unless you have a really fast server

670
00:35:13,730 --> 00:35:19,070
people will get failures in their

671
00:35:16,070 --> 00:35:21,380
connection requests but if it's too big

672
00:35:19,070 --> 00:35:24,920
then you can you're vulnerable to

673
00:35:21,380 --> 00:35:29,300
certain types of sort of denial of

674
00:35:24,920 --> 00:35:32,210
service attacks so again a little bit of

675
00:35:29,300 --> 00:35:35,060
an obscure feature but the result of

676
00:35:32,210 --> 00:35:38,030
this is now I'm returning out of this a

677
00:35:35,060 --> 00:35:42,460
file descriptors as the server can use

678
00:35:38,030 --> 00:35:42,460
to listen to pick up connection requests

679
00:35:43,640 --> 00:35:49,860
okay so let's do a little example of how

680
00:35:46,950 --> 00:35:52,850
we might actually do something and I'm

681
00:35:49,860 --> 00:35:58,200
going to use as an example a rather

682
00:35:52,850 --> 00:36:02,510
mundane application which is an echo

683
00:35:58,200 --> 00:36:07,160
server an echo server is just one that

684
00:36:02,510 --> 00:36:10,770
responds back whatever it just received

685
00:36:07,160 --> 00:36:14,900
and the code for it in the book on the

686
00:36:10,770 --> 00:36:14,900
slides we're studying

687
00:36:16,930 --> 00:36:22,380
so let me set up this amazing

688
00:36:19,390 --> 00:36:22,380
demonstration

689
00:36:31,140 --> 00:36:37,150
so it's called the echo server I I

690
00:36:35,350 --> 00:36:40,300
meaning iterative it can only do one

691
00:36:37,150 --> 00:36:46,080
connection request at a time and I'm

692
00:36:40,300 --> 00:36:46,080
going to set it up on my laptop here and

693
00:36:48,450 --> 00:37:03,910
I'll connect to that so you'll see that

694
00:37:00,730 --> 00:37:05,770
I told the server use port 15 to 13

695
00:37:03,910 --> 00:37:10,180
which is just a random number I picked

696
00:37:05,770 --> 00:37:12,820
out as the port number in general if you

697
00:37:10,180 --> 00:37:14,500
want to do your own stuff you pick port

698
00:37:12,820 --> 00:37:17,940
numbers that are a thousand or greater

699
00:37:14,500 --> 00:37:21,970
and they're limited to be unsigned

700
00:37:17,940 --> 00:37:26,800
16-bit int so 64 65,000 something some

701
00:37:21,970 --> 00:37:29,290
maximum and as long as and by the way if

702
00:37:26,800 --> 00:37:31,270
you're you live in a corporate world

703
00:37:29,290 --> 00:37:33,880
your ports will all be locked down and

704
00:37:31,270 --> 00:37:36,070
they will not let you do this but in the

705
00:37:33,880 --> 00:37:38,740
CMU environment has a pretty permissive

706
00:37:36,070 --> 00:37:41,470
policy and actually I'm just doing this

707
00:37:38,740 --> 00:37:47,800
on localhost but you're allowed to at

708
00:37:41,470 --> 00:37:50,650
CMU open up ports like you want so

709
00:37:47,800 --> 00:37:55,540
anyways I'm going to run this client and

710
00:37:50,650 --> 00:37:59,770
you'll see that the server just said

711
00:37:55,540 --> 00:38:02,860
I've received a connection from the

712
00:37:59,770 --> 00:38:05,170
localhost not very exciting and I've

713
00:38:02,860 --> 00:38:07,480
received it from port five five four

714
00:38:05,170 --> 00:38:10,690
five seven so this is the part that got

715
00:38:07,480 --> 00:38:13,420
assigned to the client in making the

716
00:38:10,690 --> 00:38:15,880
connection the server is using port 15

717
00:38:13,420 --> 00:38:19,360
to 13 and you recall we talked about

718
00:38:15,880 --> 00:38:21,820
last time that a link is defined by the

719
00:38:19,360 --> 00:38:24,640
host and port names on either end and

720
00:38:21,820 --> 00:38:26,860
that the client side is usually assigned

721
00:38:24,640 --> 00:38:30,070
what they call it ephemeral port meaning

722
00:38:26,860 --> 00:38:32,680
it's just assigned for this particular

723
00:38:30,070 --> 00:38:34,720
session that I'm going to run and now

724
00:38:32,680 --> 00:38:37,920
here's the amazing feature of an echo

725
00:38:34,720 --> 00:38:41,730
server is that you can type in stuff and

726
00:38:37,920 --> 00:38:41,730
it will come back to you

727
00:38:42,690 --> 00:38:49,660
because echoing so what's happening is

728
00:38:45,760 --> 00:38:53,050
I'm sending those meaningful messages to

729
00:38:49,660 --> 00:38:55,210
the server it's reading them and it's

730
00:38:53,050 --> 00:38:57,340
just send him right back again and then

731
00:38:55,210 --> 00:39:00,190
the clients reading that and printing it

732
00:38:57,340 --> 00:39:02,140
on the screen so that it's not it's a

733
00:39:00,190 --> 00:39:04,720
sort of the minimum functionality you

734
00:39:02,140 --> 00:39:07,000
could imagine but you can see that the

735
00:39:04,720 --> 00:39:08,920
server is telling you oh by the way I

736
00:39:07,000 --> 00:39:10,690
just received so many bytes so many

737
00:39:08,920 --> 00:39:14,470
bytes so many bytes so you can see that

738
00:39:10,690 --> 00:39:17,260
it's actually doing something and then

739
00:39:14,470 --> 00:39:21,490
if I send it into file which is just a

740
00:39:17,260 --> 00:39:27,010
control D the client will exit and the

741
00:39:21,490 --> 00:39:29,710
server will drop that connection but

742
00:39:27,010 --> 00:39:32,349
doesn't show you anything and if I

743
00:39:29,710 --> 00:39:34,480
wanted to I could start it again and you

744
00:39:32,349 --> 00:39:40,240
see this time it signed a different

745
00:39:34,480 --> 00:39:42,310
ephemeral port to the client but I can

746
00:39:40,240 --> 00:39:47,950
only do one at a time if I tried to now

747
00:39:42,310 --> 00:39:52,089
do another connection I will try and do

748
00:39:47,950 --> 00:39:54,280
it if I tried to do it I wouldn't I

749
00:39:52,089 --> 00:39:55,540
would just hang up the client would hang

750
00:39:54,280 --> 00:39:58,599
up it would not be able to get a

751
00:39:55,540 --> 00:40:02,830
connection because the server is only

752
00:39:58,599 --> 00:40:07,210
able to handle one client at a time okay

753
00:40:02,830 --> 00:40:11,520
so that's the what the application does

754
00:40:07,210 --> 00:40:11,520
and now let's see how its implemented

755
00:40:13,380 --> 00:40:18,229
so it's pretty simple that the nastiness

756
00:40:16,019 --> 00:40:21,059
was those functions we've already seen

757
00:40:18,229 --> 00:40:23,009
so here's the clients side of it it

758
00:40:21,059 --> 00:40:25,440
calls that function I went through

759
00:40:23,009 --> 00:40:28,049
called open the client file descriptor

760
00:40:25,440 --> 00:40:31,170
where you gave the name of the host and

761
00:40:28,049 --> 00:40:33,209
the name of the port that you're the

762
00:40:31,170 --> 00:40:37,259
server's operating on so I said here

763
00:40:33,209 --> 00:40:39,959
localhost 15 to 13 and I'm going to

764
00:40:37,259 --> 00:40:43,529
initialize a buffer that will be used

765
00:40:39,959 --> 00:40:46,309
for communication back and forth for

766
00:40:43,529 --> 00:40:49,559
this network communication so now

767
00:40:46,309 --> 00:40:51,900
echoing means I from a client

768
00:40:49,559 --> 00:40:56,999
perspective it will just read in what

769
00:40:51,900 --> 00:40:58,979
I've typed so using get s or F get s to

770
00:40:56,999 --> 00:41:02,699
read in what's been typed on the

771
00:40:58,979 --> 00:41:05,539
standard input and as long as that not

772
00:41:02,699 --> 00:41:08,640
null meaning I don't have a end of file

773
00:41:05,539 --> 00:41:10,019
then I will write it to the client file

774
00:41:08,640 --> 00:41:12,119
descriptors so that's how I actually

775
00:41:10,019 --> 00:41:14,279
send it over the network as I do a write

776
00:41:12,119 --> 00:41:18,420
to that

777
00:41:14,279 --> 00:41:20,549
socket that that file descriptor

778
00:41:18,420 --> 00:41:22,829
represents and then to get something

779
00:41:20,549 --> 00:41:27,779
back from the server its response I'll

780
00:41:22,829 --> 00:41:30,709
do a read and Rio as you call is

781
00:41:27,779 --> 00:41:30,709
embedded within it

782
00:41:32,869 --> 00:41:41,160
what file descriptor that read is using

783
00:41:38,209 --> 00:41:43,829
so I'll say read from that particular

784
00:41:41,160 --> 00:41:47,219
file descriptor fill the results back

785
00:41:43,829 --> 00:41:48,900
into this buffer so I'm using buff both

786
00:41:47,219 --> 00:41:52,199
as a sending buffer and a receiving

787
00:41:48,900 --> 00:41:57,269
buffer and then just print that out onto

788
00:41:52,199 --> 00:41:59,279
the on to the terminal and this is by

789
00:41:57,269 --> 00:42:03,239
the way the new lines being included in

790
00:41:59,279 --> 00:42:05,279
this not just the in all of this so

791
00:42:03,239 --> 00:42:06,930
that's how it it's working so that's all

792
00:42:05,279 --> 00:42:10,859
that happens so the main point you see

793
00:42:06,930 --> 00:42:14,749
here is that I'm using this socket like

794
00:42:10,859 --> 00:42:14,749
a file to both send and receive

795
00:42:16,380 --> 00:42:21,850
the server code is just a shade more

796
00:42:19,180 --> 00:42:25,950
nasty than that to support some of those

797
00:42:21,850 --> 00:42:28,660
amazing features it has so in particular

798
00:42:25,950 --> 00:42:33,130
there's a weird struct called a socket

799
00:42:28,660 --> 00:42:36,430
or storage that is just again part of

800
00:42:33,130 --> 00:42:38,650
this generic API that gives you a buffer

801
00:42:36,430 --> 00:42:45,760
of some kind that's big enough to store

802
00:42:38,650 --> 00:42:53,460
a name of a host is what I'm going to

803
00:42:45,760 --> 00:43:00,820
use it for you and so I'm going to

804
00:42:53,460 --> 00:43:04,630
accept a connection so except recall you

805
00:43:00,820 --> 00:43:06,970
recall is the way it it says okay I'm

806
00:43:04,630 --> 00:43:11,590
going to wait here until a client

807
00:43:06,970 --> 00:43:13,180
contacts this server so that you make a

808
00:43:11,590 --> 00:43:16,900
call to accept and it will just hang

809
00:43:13,180 --> 00:43:19,780
until that contact occurs and then what

810
00:43:16,900 --> 00:43:21,820
it will return from you is a new file

811
00:43:19,780 --> 00:43:25,060
descriptor that we call a connection

812
00:43:21,820 --> 00:43:26,680
file descriptor here which is different

813
00:43:25,060 --> 00:43:29,170
from the listening file descriptor and

814
00:43:26,680 --> 00:43:30,700
the reason is doesn't really show up in

815
00:43:29,170 --> 00:43:33,220
this code where I'm doing iteratively

816
00:43:30,700 --> 00:43:34,840
but you can imagine if I had a server

817
00:43:33,220 --> 00:43:37,600
and I wanted to be able to maintain a

818
00:43:34,840 --> 00:43:39,580
thousand connections at once so be one

819
00:43:37,600 --> 00:43:41,950
of those file descriptors that I pick up

820
00:43:39,580 --> 00:43:44,230
new requests on and then all the other

821
00:43:41,950 --> 00:43:49,150
ones are the various other clients that

822
00:43:44,230 --> 00:43:51,700
I'm communicating with right now and

823
00:43:49,150 --> 00:43:54,430
then what accept fills in here into this

824
00:43:51,700 --> 00:43:58,420
information that's a sock adder struct

825
00:43:54,430 --> 00:44:02,190
is about information about the client

826
00:43:58,420 --> 00:44:02,190
the IP address of the client

827
00:44:03,980 --> 00:44:10,220
and I'll use this call called get name

828
00:44:08,240 --> 00:44:13,180
info which is again at one of these

829
00:44:10,220 --> 00:44:21,170
kitchen sink features that I'll pass in

830
00:44:13,180 --> 00:44:25,010
this client address and it will come

831
00:44:21,170 --> 00:44:28,940
back with the ice the domain name of the

832
00:44:25,010 --> 00:44:30,530
client and that's what you saw how it

833
00:44:28,940 --> 00:44:32,630
printed out when the connection is

834
00:44:30,530 --> 00:44:36,530
formed where that connection is coming

835
00:44:32,630 --> 00:44:38,839
from so this all this business here is

836
00:44:36,530 --> 00:44:41,390
used to support that feature of being

837
00:44:38,839 --> 00:44:45,680
able to print out what's the host number

838
00:44:41,390 --> 00:44:53,480
name and what port am I using and this

839
00:44:45,680 --> 00:45:00,760
thing by the way client port is a host

840
00:44:53,480 --> 00:45:05,510
name and client port are both buffers

841
00:45:00,760 --> 00:45:07,609
yes host name and port are both buffers

842
00:45:05,510 --> 00:45:11,599
and I'm passing a pointer those buffers

843
00:45:07,609 --> 00:45:14,540
and I'm passing their length max wine

844
00:45:11,599 --> 00:45:16,819
and then the call to get name info it's

845
00:45:14,540 --> 00:45:18,829
filling those in with a string

846
00:45:16,819 --> 00:45:21,099
representations of the host name and the

847
00:45:18,829 --> 00:45:21,099
port

848
00:45:22,020 --> 00:45:26,850
and now it just makes a call to the echo

849
00:45:25,200 --> 00:45:32,220
function which I'll show you momentarily

850
00:45:26,850 --> 00:45:34,950
and then it closes that connection and

851
00:45:32,220 --> 00:45:37,350
then this continues you see the wild one

852
00:45:34,950 --> 00:45:38,850
this is in a loop forever and you

853
00:45:37,350 --> 00:45:43,530
actually have to control see on this

854
00:45:38,850 --> 00:45:44,960
program to get it to quit okay so let me

855
00:45:43,530 --> 00:45:47,640
just click one more

856
00:45:44,960 --> 00:45:49,590
so the funk this now is the echo

857
00:45:47,640 --> 00:45:52,020
function that the server uses and it's

858
00:45:49,590 --> 00:45:53,970
pretty straightforward in fact it looks

859
00:45:52,020 --> 00:45:56,190
kind of like what you just saw except it

860
00:45:53,970 --> 00:46:00,810
flips around the reading and the writing

861
00:45:56,190 --> 00:46:08,160
it will read some number of bytes over

862
00:46:00,810 --> 00:46:12,030
the connection file descriptor and if

863
00:46:08,160 --> 00:46:15,690
that's a nonzero number then it will

864
00:46:12,030 --> 00:46:17,730
echo that back by writing it if it's a

865
00:46:15,690 --> 00:46:20,850
zero that means it's detected and into

866
00:46:17,730 --> 00:46:23,670
file and it will just exit from that

867
00:46:20,850 --> 00:46:25,290
little loop but remember echo is within

868
00:46:23,670 --> 00:46:28,560
a bigger loop of accepting new

869
00:46:25,290 --> 00:46:31,190
connection requests okay but again just

870
00:46:28,560 --> 00:46:33,780
see that it reads is a way of accepting

871
00:46:31,190 --> 00:46:35,640
information from the client and then it

872
00:46:33,780 --> 00:46:37,340
writes to send information back to the

873
00:46:35,640 --> 00:46:43,080
client

874
00:46:37,340 --> 00:46:45,359
good so one interesting feature is if

875
00:46:43,080 --> 00:46:48,930
you want to test some programs you can

876
00:46:45,359 --> 00:46:50,940
use a program called telnet which it

877
00:46:48,930 --> 00:46:53,760
used to be the old-fashioned way you use

878
00:46:50,940 --> 00:46:56,400
before SSH this is how you communicated

879
00:46:53,760 --> 00:46:59,369
with other machines and it's absolutely

880
00:46:56,400 --> 00:47:03,240
completely insecure so don't ever use it

881
00:46:59,369 --> 00:47:04,650
to X and most most places you can't even

882
00:47:03,240 --> 00:47:10,260
make a connection to another machine

883
00:47:04,650 --> 00:47:12,950
using telnet it's amazing how simple

884
00:47:10,260 --> 00:47:22,310
life used to be

885
00:47:12,950 --> 00:47:25,210
but for example if I tell nut to myself

886
00:47:22,310 --> 00:47:25,210
on that port

887
00:47:27,320 --> 00:47:34,190
it will begin a session and it will in

888
00:47:31,580 --> 00:47:38,360
fact look a lot like an echo client

889
00:47:34,190 --> 00:47:41,030
because because telnet just sends

890
00:47:38,360 --> 00:47:43,670
information to the server and the server

891
00:47:41,030 --> 00:47:45,350
is designed to echo it back and so it

892
00:47:43,670 --> 00:47:48,380
will print the response and so if

893
00:47:45,350 --> 00:47:51,530
actually telnet is behaving like an echo

894
00:47:48,380 --> 00:47:53,420
client for me and I'll demo that because

895
00:47:51,530 --> 00:47:55,070
it's useful I mean this is a pretty

896
00:47:53,420 --> 00:47:57,500
trivial program but there's actually

897
00:47:55,070 --> 00:47:59,030
times you can use telnet if there's a

898
00:47:57,500 --> 00:48:00,940
server somewhere out there and you want

899
00:47:59,030 --> 00:48:05,570
to give it a poke to see what's going on

900
00:48:00,940 --> 00:48:07,700
as a tool you can use telnet let's say

901
00:48:05,570 --> 00:48:15,470
you have to escape with a control right

902
00:48:07,700 --> 00:48:20,350
bracket quick okay so now let's move on

903
00:48:15,470 --> 00:48:20,350
to http

904
00:48:22,280 --> 00:48:27,920
I try to get rid of all the animations

905
00:48:24,380 --> 00:48:29,720
in this okay so that's sort of the

906
00:48:27,920 --> 00:48:31,370
basics of the low-level socket

907
00:48:29,720 --> 00:48:36,590
programming that you need to create

908
00:48:31,370 --> 00:48:38,630
client-server applications so the best

909
00:48:36,590 --> 00:48:40,760
example out there of a client-server

910
00:48:38,630 --> 00:48:44,930
application is the world wide web and

911
00:48:40,760 --> 00:48:49,160
you know the idea web servers and your

912
00:48:44,930 --> 00:48:52,070
browser is a client so but all of that

913
00:48:49,160 --> 00:48:54,260
fits on top of the protocols for that

914
00:48:52,070 --> 00:48:58,400
sit on top of the other internet

915
00:48:54,260 --> 00:49:00,560
protocols so we talked about TCP is sort

916
00:48:58,400 --> 00:49:04,940
of sits on top of the lowest level the

917
00:49:00,560 --> 00:49:08,840
packet protocol and then HTTP it sits on

918
00:49:04,940 --> 00:49:11,330
top of that and uses TCP connections to

919
00:49:08,840 --> 00:49:16,640
send and receive data over the World

920
00:49:11,330 --> 00:49:20,360
Wide Web and that's all according to a

921
00:49:16,640 --> 00:49:22,880
protocol that was developed starting in

922
00:49:20,360 --> 00:49:27,910
the early 90s but and that's what Tim

923
00:49:22,880 --> 00:49:31,490
Berners Tim berners-lee did initially

924
00:49:27,910 --> 00:49:33,920
and it's gone through a couple revisions

925
00:49:31,490 --> 00:49:38,030
but the latest one and still dates back

926
00:49:33,920 --> 00:49:43,040
to 1999 HTTP version

927
00:49:38,030 --> 00:49:44,840
excuse me 1.1 so just is a some

928
00:49:43,040 --> 00:49:47,870
terminology and you've sort of heard

929
00:49:44,840 --> 00:49:51,740
this at various different ways is you

930
00:49:47,870 --> 00:49:55,310
can one of the clever things about HTTP

931
00:49:51,740 --> 00:49:57,560
is it lets you search set handles

932
00:49:55,310 --> 00:50:03,320
different formats you can send a JPEG

933
00:49:57,560 --> 00:50:06,590
image you can send a a text and so forth

934
00:50:03,320 --> 00:50:10,430
and those are all encoded in a format

935
00:50:06,590 --> 00:50:14,180
called mime which is actually just a way

936
00:50:10,430 --> 00:50:19,390
to take a binary values and convert them

937
00:50:14,180 --> 00:50:19,390
into hex formatted strings

938
00:50:19,510 --> 00:50:26,620
oh and and then sort of a standard for

939
00:50:24,550 --> 00:50:36,880
how you encode it at one end how you

940
00:50:26,620 --> 00:50:39,010
decode it the other and so you get to

941
00:50:36,880 --> 00:50:42,490
specify when you're sending stuff you

942
00:50:39,010 --> 00:50:45,880
specify what what type of information it

943
00:50:42,490 --> 00:50:48,070
is and then the other thing you've

944
00:50:45,880 --> 00:50:49,870
probably experienced in now we're

945
00:50:48,070 --> 00:50:53,500
talking a little bit ancient history and

946
00:50:49,870 --> 00:50:56,530
all updated momentarily but classically

947
00:50:53,500 --> 00:51:00,160
you either use static content meaning a

948
00:50:56,530 --> 00:51:04,180
fixed web page that was written in HTML

949
00:51:00,160 --> 00:51:05,710
format and was designed to just give you

950
00:51:04,180 --> 00:51:08,260
information that looks the same every

951
00:51:05,710 --> 00:51:13,230
time you looked at it or dynamic content

952
00:51:08,260 --> 00:51:15,730
where you will change so for example a

953
00:51:13,230 --> 00:51:18,070
application a server application that's

954
00:51:15,730 --> 00:51:21,100
giving you the weather it's not the same

955
00:51:18,070 --> 00:51:24,120
page every time and so it will format it

956
00:51:21,100 --> 00:51:26,320
in dynamic content if you make a request

957
00:51:24,120 --> 00:51:28,630
nowadays it's gotten a lot more

958
00:51:26,320 --> 00:51:31,420
complicated because of JavaScript and

959
00:51:28,630 --> 00:51:33,400
all these other sort of client-side

960
00:51:31,420 --> 00:51:35,400
programming languages that actually

961
00:51:33,400 --> 00:51:37,900
execute code on your client and

962
00:51:35,400 --> 00:51:41,140
communicates back and forth to get a

963
00:51:37,900 --> 00:51:42,970
result so I'm a little bit dated here

964
00:51:41,140 --> 00:51:46,600
talking about this sort of old-style way

965
00:51:42,970 --> 00:51:49,510
of working but in all cases what

966
00:51:46,600 --> 00:51:52,260
actually comes across the wires are some

967
00:51:49,510 --> 00:51:52,260
type of a file

968
00:51:54,170 --> 00:52:00,510
and then you've heard the term URL

969
00:51:57,420 --> 00:52:02,880
meaning Universal resource locator is a

970
00:52:00,510 --> 00:52:06,240
combination of a couple things one is it

971
00:52:02,880 --> 00:52:09,060
tells you where is that information in

972
00:52:06,240 --> 00:52:11,790
terms of a domain name and potentially

973
00:52:09,060 --> 00:52:17,790
with the port numbers and then also on

974
00:52:11,790 --> 00:52:19,950
that particular host where we're within

975
00:52:17,790 --> 00:52:22,080
the host is that information to be found

976
00:52:19,950 --> 00:52:25,140
and there's defaults like if you don't

977
00:52:22,080 --> 00:52:29,730
give anything it defaults to index.html

978
00:52:25,140 --> 00:52:32,460
for example but a URL in principle gives

979
00:52:29,730 --> 00:52:35,990
you where to locate something on a

980
00:52:32,460 --> 00:52:40,260
remote machine and now we've seen

981
00:52:35,990 --> 00:52:41,400
examples of the tricks that DNS plays so

982
00:52:40,260 --> 00:52:42,030
that even though you're giving a

983
00:52:41,400 --> 00:52:44,610
hostname

984
00:52:42,030 --> 00:52:46,470
a domain name it could be any of a

985
00:52:44,610 --> 00:52:49,940
number of different servers but the

986
00:52:46,470 --> 00:52:49,940
concept still the same

987
00:52:52,070 --> 00:52:58,680
so when I make a request then when I

988
00:52:56,210 --> 00:53:02,160
running my browser and I want to see a

989
00:52:58,680 --> 00:53:06,030
webpage what it does is it sends an HTTP

990
00:53:02,160 --> 00:53:08,340
request out to the server to do

991
00:53:06,030 --> 00:53:10,410
something and to return back a webpage

992
00:53:08,340 --> 00:53:12,840
and there's a couple of different

993
00:53:10,410 --> 00:53:15,930
standard services the most common the

994
00:53:12,840 --> 00:53:19,550
one that used ninety ninety seven

995
00:53:15,930 --> 00:53:23,420
percent of the time is get get me a page

996
00:53:19,550 --> 00:53:23,420
and there's other stuff too

997
00:53:27,920 --> 00:53:34,200
and then it will respond back with

998
00:53:31,700 --> 00:53:36,210
what's called the response line and

999
00:53:34,200 --> 00:53:38,880
embedded within that response will be

1000
00:53:36,210 --> 00:53:40,619
the thing you're asking for but in front

1001
00:53:38,880 --> 00:53:46,589
of it all is a header that contains

1002
00:53:40,619 --> 00:53:48,150
other stuff that is of of some range of

1003
00:53:46,589 --> 00:53:50,960
interest of whether you really care or

1004
00:53:48,150 --> 00:53:54,540
not it can also come back with a

1005
00:53:50,960 --> 00:53:59,839
response that says there's an error code

1006
00:53:54,540 --> 00:53:59,839
as you know the infamous 404 error code

1007
00:54:01,069 --> 00:54:12,500
so let me give you a demo of this just

1008
00:54:07,980 --> 00:54:12,500
so we're talking a little abstract

1009
00:54:12,560 --> 00:54:17,200
and this is a little tricky to make it

1010
00:54:15,110 --> 00:54:20,630
work

1011
00:54:17,200 --> 00:54:30,410
and I'll use telnet as a way to probe a

1012
00:54:20,630 --> 00:54:34,010
webserver so I'll make a telnet

1013
00:54:30,410 --> 00:54:37,310
connection to the computer science

1014
00:54:34,010 --> 00:54:41,780
department a web server and now I need

1015
00:54:37,310 --> 00:54:44,240
to make a get request this remember it

1016
00:54:41,780 --> 00:54:46,790
all it is is now I'm basically providing

1017
00:54:44,240 --> 00:54:53,810
the exact bytes that will be seen by the

1018
00:54:46,790 --> 00:54:58,730
web server so if I say get slash tilde

1019
00:54:53,810 --> 00:55:00,940
bryant test dot HTML see if it's really

1020
00:54:58,730 --> 00:55:00,940
works

1021
00:55:11,950 --> 00:55:15,150
I work

1022
00:55:15,849 --> 00:55:20,650
I'm always surprised when things

1023
00:55:17,869 --> 00:55:20,650
actually work ah

1024
00:55:21,470 --> 00:55:28,099
so anyways let's just look at what

1025
00:55:23,660 --> 00:55:31,519
happened so at the top is what I typed

1026
00:55:28,099 --> 00:55:35,089
in it's getting and this I'm giving some

1027
00:55:31,519 --> 00:55:37,910
the name of a particular web page that I

1028
00:55:35,089 --> 00:55:40,279
made up just for this purpose a fairly

1029
00:55:37,910 --> 00:55:45,920
simple web page and I'm telling it I

1030
00:55:40,279 --> 00:55:48,490
want the response in the HTTP 1.1 format

1031
00:55:45,920 --> 00:55:50,930
and then I have to also give a hostname

1032
00:55:48,490 --> 00:55:55,670
explicitly and the reason for this is a

1033
00:55:50,930 --> 00:55:59,450
given machine can actually be served

1034
00:55:55,670 --> 00:56:03,730
multiple hosts like if you know I want

1035
00:55:59,450 --> 00:56:08,119
to pay for a hosting of some domain name

1036
00:56:03,730 --> 00:56:09,920
say to go daddy.com but it's serving

1037
00:56:08,119 --> 00:56:11,839
hundreds or thousands of different

1038
00:56:09,920 --> 00:56:13,819
domain names and so it actually used

1039
00:56:11,839 --> 00:56:17,720
that host information to figure out

1040
00:56:13,819 --> 00:56:20,480
which particular web customer am i

1041
00:56:17,720 --> 00:56:24,109
supporting here ok and now it came back

1042
00:56:20,480 --> 00:56:27,170
with its response and it said the code

1043
00:56:24,109 --> 00:56:29,690
200 means that was accepted which it

1044
00:56:27,170 --> 00:56:31,549
tells you ok and now it comes back with

1045
00:56:29,690 --> 00:56:35,420
this is the header information that says

1046
00:56:31,549 --> 00:56:40,009
here's the date here's the server here's

1047
00:56:35,420 --> 00:56:43,549
some cookie information it's a the

1048
00:56:40,009 --> 00:56:47,839
overall content is exactly 479 bytes and

1049
00:56:43,549 --> 00:56:54,349
it's a text HTML format and then it will

1050
00:56:47,839 --> 00:56:58,130
return back the raw HTML that this web

1051
00:56:54,349 --> 00:57:00,920
page had which is what I actually you

1052
00:56:58,130 --> 00:57:03,950
know I typed that I did this by hand but

1053
00:57:00,920 --> 00:57:06,950
you can imagine other types of things

1054
00:57:03,950 --> 00:57:09,470
and then it just closes the connection

1055
00:57:06,950 --> 00:57:13,819
so you can see that it's returned both

1056
00:57:09,470 --> 00:57:17,029
the header information and the actual

1057
00:57:13,819 --> 00:57:19,819
content information as well and so that

1058
00:57:17,029 --> 00:57:23,720
that's the general idea of what an HTTP

1059
00:57:19,819 --> 00:57:25,740
transaction looks like and the slides go

1060
00:57:23,720 --> 00:57:29,270
through a different version of it

1061
00:57:25,740 --> 00:57:29,270
but it's the same general idea

1062
00:57:31,619 --> 00:57:37,959
so the text has a really interesting

1063
00:57:34,599 --> 00:57:41,170
code that I highly recommend you read

1064
00:57:37,959 --> 00:57:44,709
and study called tiny which is the

1065
00:57:41,170 --> 00:57:49,569
world's smallest functioning webserver

1066
00:57:44,709 --> 00:57:52,809
and what it's really only a couple pages

1067
00:57:49,569 --> 00:57:54,699
of code it serves it says some very

1068
00:57:52,809 --> 00:57:59,289
basic handling of static and dynamic

1069
00:57:54,699 --> 00:58:03,789
content it's something you can sit down

1070
00:57:59,289 --> 00:58:06,489
and read and study 239 lines of code now

1071
00:58:03,789 --> 00:58:09,640
it lacks a lot of features it does very

1072
00:58:06,489 --> 00:58:11,469
bad job of handling errors it doesn't

1073
00:58:09,640 --> 00:58:13,749
have a lot of the functionality you'd

1074
00:58:11,469 --> 00:58:15,759
come to expect in a server so it's been

1075
00:58:13,749 --> 00:58:19,539
stripped down to the sort of bare bones

1076
00:58:15,759 --> 00:58:21,369
to demonstrate the concepts but it's

1077
00:58:19,539 --> 00:58:26,349
pretty cool that it works and I can say

1078
00:58:21,369 --> 00:58:29,170
this because I didn't write it so so the

1079
00:58:26,349 --> 00:58:31,479
overall idea then is and the cert it's a

1080
00:58:29,170 --> 00:58:34,569
server so it's receiving requests from

1081
00:58:31,479 --> 00:58:36,849
clients from browsers saying I want this

1082
00:58:34,569 --> 00:58:41,410
web page or I want to execute this

1083
00:58:36,849 --> 00:58:44,140
particular dynamic program to get

1084
00:58:41,410 --> 00:58:46,719
dynamic content so it comes in with a

1085
00:58:44,140 --> 00:58:50,769
request get requests like you just saw

1086
00:58:46,719 --> 00:58:54,219
and it splits that it picks out the

1087
00:58:50,769 --> 00:58:57,130
what's called the URI the argument to

1088
00:58:54,219 --> 00:59:01,059
the get request or URI is a universal

1089
00:58:57,130 --> 00:59:05,589
resource indicator which is not a

1090
00:59:01,059 --> 00:59:07,989
complete potential of URIs are a super

1091
00:59:05,589 --> 00:59:09,880
set of URLs URL has to include the

1092
00:59:07,989 --> 00:59:14,109
hostname and all the information to get

1093
00:59:09,880 --> 00:59:16,829
from anywhere to anywhere but a URI can

1094
00:59:14,109 --> 00:59:21,009
just be a portion of that information

1095
00:59:16,829 --> 00:59:23,259
and then it it will determine is it's a

1096
00:59:21,009 --> 00:59:26,249
request for static or dynamic content

1097
00:59:23,259 --> 00:59:29,079
I'll show you both of them hopefully and

1098
00:59:26,249 --> 00:59:31,709
if it's a static content all it has to

1099
00:59:29,079 --> 00:59:34,479
do is retrieve a file on its own machine

1100
00:59:31,709 --> 00:59:37,870
send that back in that format that I

1101
00:59:34,479 --> 00:59:41,040
just showed you so let's take a look

1102
00:59:37,870 --> 00:59:45,010
this is sort of the guts of the static

1103
00:59:41,040 --> 00:59:47,590
server so what it's done is it's

1104
00:59:45,010 --> 00:59:50,140
received a request this is you know a

1105
00:59:47,590 --> 00:59:52,030
function a helper function of of this

1106
00:59:50,140 --> 00:59:54,610
code so I'm kind of buried down in the

1107
00:59:52,030 --> 00:59:57,370
middle but what it's picked out is the

1108
00:59:54,610 --> 01:00:03,810
server is received a request for a

1109
00:59:57,370 --> 01:00:08,020
particular file name from the URI and

1110
01:00:03,810 --> 01:00:10,180
it's also done a look up through the OS

1111
01:00:08,020 --> 01:00:12,310
call to figure out how big is that file

1112
01:00:10,180 --> 01:00:14,710
how many bytes long is that file and

1113
01:00:12,310 --> 01:00:19,000
it's also given the file descriptor that

1114
01:00:14,710 --> 01:00:22,030
is the connect the file descriptor for

1115
01:00:19,000 --> 01:00:23,980
this particular connection so all it's

1116
01:00:22,030 --> 01:00:25,990
doing here you'll notice is it's doing a

1117
01:00:23,980 --> 01:00:28,840
bunch of Spirit ups into a buffer and

1118
01:00:25,990 --> 01:00:33,790
what it's doing there is it's formatting

1119
01:00:28,840 --> 01:00:36,970
the header information as a byte is just

1120
01:00:33,790 --> 01:00:39,310
a big long string including the the

1121
01:00:36,970 --> 01:00:42,640
returns in it and one of the features

1122
01:00:39,310 --> 01:00:47,200
which don't ask me why the great wisdom

1123
01:00:42,640 --> 01:00:49,450
of of Tim Berners we did or whoever

1124
01:00:47,200 --> 01:00:53,170
figure this out but every line has to

1125
01:00:49,450 --> 01:00:55,960
finish with both a carriage return and a

1126
01:00:53,170 --> 01:00:58,300
new line instead of the usual Linux

1127
01:00:55,960 --> 01:01:01,090
thing of just new lines so that's what

1128
01:00:58,300 --> 01:01:03,120
the backslash R backslash n mu but

1129
01:01:01,090 --> 01:01:07,270
you'll see it's going to respond back to

1130
01:01:03,120 --> 01:01:10,300
with an okay and some of this kind of

1131
01:01:07,270 --> 01:01:16,180
information that's not very exciting but

1132
01:01:10,300 --> 01:01:18,550
the ones that really matter are are the

1133
01:01:16,180 --> 01:01:22,930
length the invites that has to be given

1134
01:01:18,550 --> 01:01:25,960
and the type it's beginning good file

1135
01:01:22,930 --> 01:01:31,480
type oh there's another function

1136
01:01:25,960 --> 01:01:33,580
oh I remember why there's another helper

1137
01:01:31,480 --> 01:01:36,760
function here that because this supports

1138
01:01:33,580 --> 01:01:39,460
not just text but also gifts and JPEG

1139
01:01:36,760 --> 01:01:43,270
images so get file type is another

1140
01:01:39,460 --> 01:01:46,320
function somewhere else that telling

1141
01:01:43,270 --> 01:01:49,660
which which a mime type is this

1142
01:01:46,320 --> 01:01:52,109
particular file

1143
01:01:49,660 --> 01:01:58,390
and and so it's putting that together

1144
01:01:52,109 --> 01:02:02,670
and it's an outright set out so it

1145
01:01:58,390 --> 01:02:02,670
writes the header information out to the

1146
01:02:06,480 --> 01:02:13,529
client so it's sending back to the

1147
01:02:10,089 --> 01:02:17,950
client and then it's going through a few

1148
01:02:13,529 --> 01:02:20,619
gyrations here to get the file open it

1149
01:02:17,950 --> 01:02:25,180
up and then there's a function called MF

1150
01:02:20,619 --> 01:02:26,980
if you guys covered MF get yeah which is

1151
01:02:25,180 --> 01:02:29,250
just a tricky way to avoid having to

1152
01:02:26,980 --> 01:02:31,900
actually read the file into the machine

1153
01:02:29,250 --> 01:02:40,269
but basically be able to pass off a

1154
01:02:31,900 --> 01:02:43,059
pointer directly to or into the read it

1155
01:02:40,269 --> 01:02:45,190
through explicit read commands into yet

1156
01:02:43,059 --> 01:02:49,180
another buffer it just avoids one step

1157
01:02:45,190 --> 01:02:52,029
of buffering so all it does is map then

1158
01:02:49,180 --> 01:02:56,289
of from the operating system where this

1159
01:02:52,029 --> 01:02:58,869
particular file is located and then

1160
01:02:56,289 --> 01:03:04,240
writes that so now it's sending it off

1161
01:02:58,869 --> 01:03:07,299
to the client and so this could be done

1162
01:03:04,240 --> 01:03:09,700
with a regular read in a but it's a

1163
01:03:07,299 --> 01:03:12,039
little bit more elegant way to handle it

1164
01:03:09,700 --> 01:03:15,569
and you'll notice by the way that the

1165
01:03:12,039 --> 01:03:19,059
content length here is the length of the

1166
01:03:15,569 --> 01:03:21,220
file the and not does not include the

1167
01:03:19,059 --> 01:03:22,420
number of bytes in the header so the

1168
01:03:21,220 --> 01:03:25,359
header comes first

1169
01:03:22,420 --> 01:03:28,809
there's no length associated with it

1170
01:03:25,359 --> 01:03:32,619
that so sent back but now the only way

1171
01:03:28,809 --> 01:03:37,170
that the client knows exactly how many

1172
01:03:32,619 --> 01:03:40,630
bytes that response is going to be is by

1173
01:03:37,170 --> 01:03:44,019
picking out this number in the header

1174
01:03:40,630 --> 01:03:46,119
and reading that many bytes from we'll

1175
01:03:44,019 --> 01:03:50,680
see that in a minute but anyways this is

1176
01:03:46,119 --> 01:03:52,059
a way of a file gets sent so now let's

1177
01:03:50,680 --> 01:03:54,279
just real quickly look at dynamic

1178
01:03:52,059 --> 01:03:57,640
content so the idea of dynamic content

1179
01:03:54,279 --> 01:04:01,960
is that lets you pass in parameters to a

1180
01:03:57,640 --> 01:04:02,740
program that then gets executed and the

1181
01:04:01,960 --> 01:04:04,690
purpose of that

1182
01:04:02,740 --> 01:04:08,500
what that program then has to do is

1183
01:04:04,690 --> 01:04:11,170
compose a webpage and send that webpage

1184
01:04:08,500 --> 01:04:15,840
back to you so I'm going to demo this

1185
01:04:11,170 --> 01:04:15,840
with a feature built into here

1186
01:04:30,090 --> 01:04:37,660
so in particular you probably can't you

1187
01:04:35,650 --> 01:04:43,060
can barely see I don't have a good way

1188
01:04:37,660 --> 01:04:45,130
to blow up the thing abut Dion and you

1189
01:04:43,060 --> 01:04:49,270
can also see what kind of things I look

1190
01:04:45,130 --> 01:04:52,960
at but anyways if I just say localhost

1191
01:04:49,270 --> 01:04:55,660
Cohen 15 to 13 that means port number 15

1192
01:04:52,960 --> 01:04:57,340
to 13 on my local machine which is

1193
01:04:55,660 --> 01:05:00,670
currently running the tiny web server

1194
01:04:57,340 --> 01:05:05,410
and the only webpage available for it is

1195
01:05:00,670 --> 01:05:07,540
this rather stunning figure here but it

1196
01:05:05,410 --> 01:05:15,850
shows that it can handle both gift

1197
01:05:07,540 --> 01:05:19,840
content and text HTML but it also

1198
01:05:15,850 --> 01:05:22,510
supports another interesting feature

1199
01:05:19,840 --> 01:05:28,240
which is a program that can add two

1200
01:05:22,510 --> 01:05:31,590
numbers called addcom so our idea for a

1201
01:05:28,240 --> 01:05:38,320
startup coming that didn't quite make it

1202
01:05:31,590 --> 01:05:41,410
so in particular the idea this is

1203
01:05:38,320 --> 01:05:44,580
it's a CGI program it's a dynamic

1204
01:05:41,410 --> 01:05:47,730
content so that I passing two numbers

1205
01:05:44,580 --> 01:05:51,310
embedded within the URL my request and

1206
01:05:47,730 --> 01:05:54,490
it comes back with a web page that is

1207
01:05:51,310 --> 01:05:57,430
beautifully formatted like this one so

1208
01:05:54,490 --> 01:05:59,590
you can't see very well maybe but if you

1209
01:05:57,430 --> 01:06:01,590
look up there that teeny tiny print at

1210
01:05:59,590 --> 01:06:05,800
the top

1211
01:06:01,590 --> 01:06:09,270
Yosi localhost colon 15 213 that's the

1212
01:06:05,800 --> 01:06:11,890
web server and slash cgi - bin that's

1213
01:06:09,270 --> 01:06:14,380
what this particular server and what

1214
01:06:11,890 --> 01:06:17,440
most servers do for interpreting dynamic

1215
01:06:14,380 --> 01:06:20,590
content and then a program it's an

1216
01:06:17,440 --> 01:06:23,020
executable file called adder and then

1217
01:06:20,590 --> 01:06:25,150
the argument string that you embed in

1218
01:06:23,020 --> 01:06:28,120
this kind of curious way the question

1219
01:06:25,150 --> 01:06:31,240
mark and then use ampersands to separate

1220
01:06:28,120 --> 01:06:33,850
out the different fields so that's all

1221
01:06:31,240 --> 01:06:36,520
pretty standard way of handling a

1222
01:06:33,850 --> 01:06:38,980
dynamic content and as I said nowadays

1223
01:06:36,520 --> 01:06:41,530
there's a lot fancier ways of doing it

1224
01:06:38,980 --> 01:06:42,460
but that's sort of the basic way and

1225
01:06:41,530 --> 01:06:49,690
you'll see it still

1226
01:06:42,460 --> 01:06:52,210
going to use today so imagine that this

1227
01:06:49,690 --> 01:06:54,250
time it's a get request but instead of

1228
01:06:52,210 --> 01:06:56,859
the adder function at some other Perl

1229
01:06:54,250 --> 01:06:59,740
program that is sitting on the server

1230
01:06:56,859 --> 01:07:01,330
somewhere called Eng and we won't worry

1231
01:06:59,740 --> 01:07:03,940
about what that program does we'll just

1232
01:07:01,330 --> 01:07:06,040
show you the idea behind it so in

1233
01:07:03,940 --> 01:07:07,869
particularly there's a get request comes

1234
01:07:06,040 --> 01:07:11,020
in and it says cgi-bin

1235
01:07:07,869 --> 01:07:14,640
and then the next argument is

1236
01:07:11,020 --> 01:07:17,380
interpreted as the name of a file and

1237
01:07:14,640 --> 01:07:22,680
what will happen then is that the server

1238
01:07:17,380 --> 01:07:22,680
will spawn off a process

1239
01:07:31,400 --> 01:07:38,700
using our friends fork and exec which

1240
01:07:34,980 --> 01:07:43,350
you know so well now during the shell

1241
01:07:38,700 --> 01:07:48,870
lab so and that that program will

1242
01:07:43,350 --> 01:07:54,830
execute will execute and it will its job

1243
01:07:48,870 --> 01:07:58,350
then is to generate a file in HTML of

1244
01:07:54,830 --> 01:08:01,430
format and then the server will send the

1245
01:07:58,350 --> 01:08:01,430
result back to the client

1246
01:08:04,410 --> 01:08:09,400
so there's a few details we got to

1247
01:08:07,990 --> 01:08:12,340
figure out to make this work

1248
01:08:09,400 --> 01:08:15,580
one is how will I actually pass

1249
01:08:12,340 --> 01:08:19,450
arguments how will end PL know what's

1250
01:08:15,580 --> 01:08:23,410
being passed to it as arguments how ng

1251
01:08:19,450 --> 01:08:26,140
I'll get whatever page HTML it creates

1252
01:08:23,410 --> 01:08:28,089
back to the server so that the server

1253
01:08:26,140 --> 01:08:32,400
can send it to the client those are all

1254
01:08:28,089 --> 01:08:34,990
the sort of details of the CGI

1255
01:08:32,400 --> 01:08:37,410
specification CGI stands for common

1256
01:08:34,990 --> 01:08:37,410
gateway interface

1257
01:08:43,779 --> 01:08:56,589
so you just saw a demo of edcom and so

1258
01:08:52,329 --> 01:08:59,859
let's just look at how this works so as

1259
01:08:56,589 --> 01:09:02,889
I mentioned the way things get passed is

1260
01:08:59,859 --> 01:09:05,440
within the URL you include the program

1261
01:09:02,889 --> 01:09:08,619
name and then the question mark is what

1262
01:09:05,440 --> 01:09:10,829
is like the Terminator for the program

1263
01:09:08,619 --> 01:09:13,900
name and then all the other arguments

1264
01:09:10,829 --> 01:09:15,670
with ampersands between them and you

1265
01:09:13,900 --> 01:09:19,750
can't have any blanks in here so they

1266
01:09:15,670 --> 01:09:22,029
put present 20s and as you probably see

1267
01:09:19,750 --> 01:09:24,039
in various other those are called escape

1268
01:09:22,029 --> 01:09:25,929
codes when you can't use a particular

1269
01:09:24,039 --> 01:09:28,170
character how do you encode it in some

1270
01:09:25,929 --> 01:09:28,170
other way

1271
01:09:30,949 --> 01:09:33,009
you

1272
01:09:35,199 --> 01:09:39,940
so the first thing is how does the

1273
01:09:37,810 --> 01:09:42,819
server then pass the argument to the

1274
01:09:39,940 --> 01:09:44,890
program that gets executed well it's

1275
01:09:42,819 --> 01:09:47,739
really weird the way it does it is by

1276
01:09:44,890 --> 01:09:49,230
creating an environment variable for

1277
01:09:47,739 --> 01:09:54,460
your machine

1278
01:09:49,230 --> 01:09:58,770
that's called query string and so the

1279
01:09:54,460 --> 01:10:05,770
server defines that environment variable

1280
01:09:58,770 --> 01:10:09,340
and then the job on the CGI side of the

1281
01:10:05,770 --> 01:10:11,170
script is to then retrieve that

1282
01:10:09,340 --> 01:10:13,929
environment variable is a way of getting

1283
01:10:11,170 --> 01:10:15,850
the string you can already see hey wait

1284
01:10:13,929 --> 01:10:17,860
a minute what if you were running

1285
01:10:15,850 --> 01:10:20,860
multiple servers at once you can see

1286
01:10:17,860 --> 01:10:22,270
you've got a problem here but actually

1287
01:10:20,860 --> 01:10:24,120
no environments are specific to

1288
01:10:22,270 --> 01:10:28,360
particular processes so this will work

1289
01:10:24,120 --> 01:10:31,989
so it's creating for the application

1290
01:10:28,360 --> 01:10:33,820
program that we'll be able to sort of

1291
01:10:31,989 --> 01:10:36,190
retrieve from the operating system

1292
01:10:33,820 --> 01:10:42,900
essentially what arguments were passed

1293
01:10:36,190 --> 01:10:42,900
to the are being passed to it

1294
01:10:45,360 --> 01:10:51,070
and so this is what the code looks like

1295
01:10:48,040 --> 01:11:03,250
for the dynamic server again it's going

1296
01:10:51,070 --> 01:11:12,909
to write back some information back to

1297
01:11:03,250 --> 01:11:17,670
the the client and let's look at this

1298
01:11:12,909 --> 01:11:20,679
and now it's going to set up this CGI

1299
01:11:17,670 --> 01:11:24,000
query string environment variable and

1300
01:11:20,679 --> 01:11:26,739
then use our friends dupe and exec

1301
01:11:24,000 --> 01:11:40,210
basically to redirect the standard

1302
01:11:26,739 --> 01:11:42,760
output to its client oh I'm sorry

1303
01:11:40,210 --> 01:11:47,650
the file descriptor is the the client

1304
01:11:42,760 --> 01:11:51,280
file descriptor so it will tell it's

1305
01:11:47,650 --> 01:11:53,380
going to go and we're in a fork I'm

1306
01:11:51,280 --> 01:11:55,989
sorry so now we're in the child process

1307
01:11:53,380 --> 01:11:58,080
okay let me read all the code and within

1308
01:11:55,989 --> 01:12:01,390
the child process it's going to rename

1309
01:11:58,080 --> 01:12:05,980
the it's standard output so that it's

1310
01:12:01,390 --> 01:12:09,190
writing directly to the client and and

1311
01:12:05,980 --> 01:12:11,650
then call exec which as you know it's

1312
01:12:09,190 --> 01:12:14,890
the way you take this program which is

1313
01:12:11,650 --> 01:12:17,290
just given by a file name and fire it up

1314
01:12:14,890 --> 01:12:21,460
and get it going with that defined

1315
01:12:17,290 --> 01:12:23,310
environment value and then this is the

1316
01:12:21,460 --> 01:12:26,310
parent we'll just wait until the child

1317
01:12:23,310 --> 01:12:26,310
complete

1318
01:12:27,340 --> 01:12:32,130
okay so now we're almost done

1319
01:12:34,390 --> 01:12:40,550
so the now this is what the actual

1320
01:12:37,370 --> 01:12:44,420
program the adder program does the one

1321
01:12:40,550 --> 01:12:48,470
that the CGI program the one that's been

1322
01:12:44,420 --> 01:12:54,500
forked off and exempt so it creates then

1323
01:12:48,470 --> 01:12:59,990
the HTML that you want to send back and

1324
01:12:54,500 --> 01:13:03,230
here it's pretty mundane the only actual

1325
01:12:59,990 --> 01:13:05,720
HTML and here are the PS meeting

1326
01:13:03,230 --> 01:13:12,650
paragraphs Merkers so this is literally

1327
01:13:05,720 --> 01:13:17,060
generating HTTP HTML content and storing

1328
01:13:12,650 --> 01:13:20,870
them all in a string called content and

1329
01:13:17,060 --> 01:13:25,100
now it wants to send that content back

1330
01:13:20,870 --> 01:13:27,560
and you saw before that the server

1331
01:13:25,100 --> 01:13:30,220
already filled in the top-level stuff

1332
01:13:27,560 --> 01:13:33,950
but I have to tell what is the type and

1333
01:13:30,220 --> 01:13:35,990
how many bytes is is so I'll use sterlin

1334
01:13:33,950 --> 01:13:39,680
to figure out how many bytes I'm sending

1335
01:13:35,990 --> 01:13:44,780
back and the content type and then I

1336
01:13:39,680 --> 01:13:47,540
will and I'm pretty effing this which as

1337
01:13:44,780 --> 01:13:49,580
you recall ivory mapped a standard

1338
01:13:47,540 --> 01:13:53,300
output now is talking directly to the

1339
01:13:49,580 --> 01:13:56,000
client and just to be sure it all goes

1340
01:13:53,300 --> 01:13:58,430
out I'll flush that out of there and so

1341
01:13:56,000 --> 01:14:02,930
what's happening here then is that it's

1342
01:13:58,430 --> 01:14:07,310
the job of the CGI program to write the

1343
01:14:02,930 --> 01:14:09,700
HTML and to send it back to the the

1344
01:14:07,310 --> 01:14:09,700
client

1345
01:14:19,000 --> 01:14:25,410
so again let's just do a real quick demo

1346
01:14:21,850 --> 01:14:25,410
here got just enough time

1347
01:14:32,449 --> 01:14:34,480
Oh

1348
01:14:46,150 --> 01:14:51,640
so I've got the tiny web server running

1349
01:14:48,760 --> 01:14:56,460
down at the bottom and I'm using telnet

1350
01:14:51,640 --> 01:14:56,460
to reach it and so now I want to say

1351
01:14:59,440 --> 01:15:19,290
I have to take time / CGI - Ben / adder

1352
01:15:11,730 --> 01:15:19,290
what numbers you want to add 17 and 13

1353
01:15:23,640 --> 01:15:29,760
you don't get many shots at it so I like

1354
01:15:26,260 --> 01:15:29,760
to double check I'm doing

1355
01:15:43,460 --> 01:15:50,240
we worked always mixed so it shouldn't

1356
01:15:48,800 --> 01:15:53,150
surprise you what comes back because you

1357
01:15:50,240 --> 01:15:55,160
just saw that Cosette did it but what

1358
01:15:53,150 --> 01:15:59,510
you see then is that this first three

1359
01:15:55,160 --> 01:16:02,960
line got generated by the the server

1360
01:15:59,510 --> 01:16:06,140
code that comes back with the okay

1361
01:16:02,960 --> 01:16:09,040
information about the server and then

1362
01:16:06,140 --> 01:16:12,770
the content length was generated by the

1363
01:16:09,040 --> 01:16:15,800
CGI program adder and the content type

1364
01:16:12,770 --> 01:16:20,840
and then this is the HTML that you saw

1365
01:16:15,800 --> 01:16:24,830
being generated so it's actually what

1366
01:16:20,840 --> 01:16:26,210
people say about this early world wide

1367
01:16:24,830 --> 01:16:28,820
web and it's gotten a lot more

1368
01:16:26,210 --> 01:16:31,220
complicated is the best thing Tim

1369
01:16:28,820 --> 01:16:33,200
berners-lee was to figure out how simple

1370
01:16:31,220 --> 01:16:37,340
it could be because other people were

1371
01:16:33,200 --> 01:16:41,810
working much more exotic ways to get

1372
01:16:37,340 --> 01:16:42,950
different agents to talk to each other

1373
01:16:41,810 --> 01:16:46,040
over the Internet

1374
01:16:42,950 --> 01:16:47,270
and what berners-lee figured out is we

1375
01:16:46,040 --> 01:16:50,990
can just kind of cobble together

1376
01:16:47,270 --> 01:16:53,060
standard ideas of sockets interface have

1377
01:16:50,990 --> 01:16:58,150
some protocol pretty straightforward

1378
01:16:53,060 --> 01:17:01,040
protocol handle different content type

1379
01:16:58,150 --> 01:17:03,100
set up these dynamic things by forking

1380
01:17:01,040 --> 01:17:05,930
off a process every time which is

1381
01:17:03,100 --> 01:17:09,350
extraordinarily inefficient way to do it

1382
01:17:05,930 --> 01:17:11,180
like to add two numbers by forking off a

1383
01:17:09,350 --> 01:17:16,730
whole process and doing it is totally

1384
01:17:11,180 --> 01:17:19,790
absurd but then shows add calm but you

1385
01:17:16,730 --> 01:17:22,040
know it's not it's in some ways that he

1386
01:17:19,790 --> 01:17:23,990
took a bunch of ideas that existed and

1387
01:17:22,040 --> 01:17:26,540
figured out how to put it together and

1388
01:17:23,990 --> 01:17:28,370
I'll recognize that the value people

1389
01:17:26,540 --> 01:17:30,620
would obtain from that and it took the

1390
01:17:28,370 --> 01:17:32,930
internet from being something that was

1391
01:17:30,620 --> 01:17:35,930
certainly used by nerdy people to talk

1392
01:17:32,930 --> 01:17:38,450
to each other and opened it up to all

1393
01:17:35,930 --> 01:17:40,340
the things that we know of today so it

1394
01:17:38,450 --> 01:17:42,860
was a huge step forward I give them full

1395
01:17:40,340 --> 01:17:43,760
credit even if from a technical point of

1396
01:17:42,860 --> 01:17:46,970
view it's actually fairly

1397
01:17:43,760 --> 01:17:49,390
straightforward okay so that will do us

1398
01:17:46,970 --> 01:17:49,390
through today

